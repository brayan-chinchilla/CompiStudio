/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,15],$V2=[1,11],$V3=[1,10],$V4=[1,12],$V5=[1,13],$V6=[1,14],$V7=[1,17],$V8=[1,18],$V9=[1,19],$Va=[1,20],$Vb=[1,21],$Vc=[1,22],$Vd=[2,5,8,16,17,31,47,49,50,52,53,54,55,56,57],$Ve=[2,5,7,8,16,17,31,47,49,50,52,53,54,55,56,57],$Vf=[1,31],$Vg=[1,33],$Vh=[1,37],$Vi=[17,25],$Vj=[17,19,25,27],$Vk=[2,5,7,8,16,17,22,31,47,49,50,52,53,54,55,56,57],$Vl=[1,47],$Vm=[22,27],$Vn=[2,25],$Vo=[1,52],$Vp=[2,5,7,8,16,17,21,22,25,27,28,30,31,36,37,38,39,42,44,45,47,49,50,52,53,54,55,56,57,58,59,60,61,65,67,76,77,80,96,97,98,99,100,101,102],$Vq=[1,65],$Vr=[1,66],$Vs=[1,70],$Vt=[1,71],$Vu=[1,74],$Vv=[1,75],$Vw=[1,82],$Vx=[1,83],$Vy=[1,76],$Vz=[1,77],$VA=[1,78],$VB=[1,79],$VC=[1,80],$VD=[1,81],$VE=[2,5,7,8,13,16,17,22,25,28,30,31,36,37,38,39,42,44,45,47,49,50,52,53,54,55,56,57,58,59,60,61,65,67,76,77,80,96,97,98,99,100,101,102],$VF=[1,86],$VG=[1,113],$VH=[1,96],$VI=[1,98],$VJ=[1,97],$VK=[1,99],$VL=[1,100],$VM=[1,101],$VN=[1,102],$VO=[1,103],$VP=[1,104],$VQ=[1,105],$VR=[1,106],$VS=[1,107],$VT=[1,108],$VU=[1,109],$VV=[1,110],$VW=[1,111],$VX=[1,112],$VY=[2,5,7,8,13,16,17,19,21,22,25,27,28,30,31,36,37,38,39,42,44,45,47,49,50,52,53,54,55,56,57,58,59,60,61,65,66,67,75,76,77,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102],$VZ=[2,87],$V_=[1,114],$V$=[1,115],$V01=[2,85],$V11=[22,30],$V21=[2,5,7,8,16,17,21,22,25,27,28,30,31,36,37,38,39,42,44,45,47,49,50,52,53,54,55,56,57,58,59,60,61,65,67,76,77,96,97,98,99,100,101,102],$V31=[1,156],$V41=[2,84],$V51=[1,159],$V61=[2,5,7,8,13,16,17,21,22,25,27,28,30,31,36,37,38,39,42,44,45,47,49,50,52,53,54,55,56,57,58,59,60,61,65,66,67,76,77,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102],$V71=[2,16,17,25,28,30,36,37,38,39,42,44,45,47,49,50,52,53,54,55,56,57,58,59,60,61,76,77,80,96,97,98,99,100,101,102],$V81=[2,28],$V91=[21,22],$Va1=[2,5,7,8,13,16,17,21,22,25,27,28,30,31,36,37,38,39,42,44,45,47,49,50,52,53,54,55,56,57,58,59,60,61,65,66,67,76,77,80,81,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102],$Vb1=[2,5,7,8,13,16,17,21,22,25,27,28,30,31,36,37,38,39,42,44,45,47,49,50,52,53,54,55,56,57,58,59,60,61,65,66,67,76,77,80,81,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102],$Vc1=[2,5,7,8,13,16,17,21,22,25,27,28,30,31,36,37,38,39,42,44,45,47,49,50,52,53,54,55,56,57,58,59,60,61,65,66,67,76,77,86,87,88,93,94,95,96,97,98,99,100,101,102],$Vd1=[2,5,7,8,13,16,17,21,22,25,27,28,30,31,36,37,38,39,42,44,45,47,49,50,52,53,54,55,56,57,58,59,60,61,65,66,67,76,77,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102],$Ve1=[1,182],$Vf1=[1,195],$Vg1=[1,188],$Vh1=[1,189],$Vi1=[1,190],$Vj1=[1,191],$Vk1=[1,192],$Vl1=[1,193],$Vm1=[1,196],$Vn1=[1,197],$Vo1=[1,198],$Vp1=[1,199],$Vq1=[2,16,17,25,28,30,36,37,38,39,42,44,45,47,49,50,52,53,54,55,56,57,58,59,60,61,65,67,76,77,80,96,97,98,99,100,101,102],$Vr1=[2,7,16,17,25,28,30,36,37,38,39,42,44,45,47,49,50,52,53,54,55,56,57,58,59,60,61,65,67,76,77,80,96,97,98,99,100,101,102],$Vs1=[2,7,16,17,25,28,30,36,37,38,39,42,44,45,47,49,50,52,53,54,55,56,57,58,59,60,61,65,67,76,77,96,97,98,99,100,101,102],$Vt1=[2,68],$Vu1=[1,253],$Vv1=[1,254],$Vw1=[30,65,67];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"l_global":4,"EOF":5,"global":6,"SEMICOLON":7,"R_IMPORT":8,"import_list":9,"funcDeclar":10,"varDeclar":11,"l_id":12,"EQUAL":13,"exp":14,"defineStruct":15,"R_DEFINE":16,"ID":17,"R_AS":18,"BRACKET_L":19,"l_declar":20,"BRACKET_R":21,"COMMA":22,"FILENAME":23,"type":24,"CALL_CHAPUZ":25,"l_param":26,"PAR_R":27,"BRACE_L":28,"l_statement":29,"BRACE_R":30,"R_PUBLIC":31,"statement":32,"varAssign":33,"jump":34,"if":35,"R_WHILE":36,"PAR_L":37,"R_DO":38,"R_FOR":39,"for_init":40,"for_update":41,"R_SWITCH":42,"l_case":43,"R_THROW":44,"R_TRY":45,"R_CATCH":46,"R_VAR":47,"COLONEQUAL":48,"R_CONST":49,"R_GLOBAL":50,"primType":51,"R_VOID":52,"ARRAY_CHAPUZ":53,"R_INTEGER":54,"R_DOUBLE":55,"R_CHAR":56,"R_BOOLEAN":57,"R_CONTINUE":58,"R_BREAK":59,"R_RETURN":60,"R_IF":61,"if_else":62,"R_ELSE":63,"case":64,"R_CASE":65,"COLON":66,"R_DEFAULT":67,"l_assign":68,"l_exp":69,"access":70,"atomic":71,"exp_arithmetic":72,"exp_logic":73,"update":74,"DOT":75,"R_STRC":76,"DOLLAR":77,"PLUSPLUS":78,"MINUSMINUS":79,"MINUS":80,"PLUS":81,"TIMES":82,"DIVIDE":83,"MODULE":84,"POW":85,"EQUALEQUALEQUAL":86,"EQUALEQUAL":87,"NOTEQUAL":88,"LESS":89,"LESSEQUAL":90,"GREATER":91,"GREATEREQUAL":92,"AND":93,"OR":94,"XOR":95,"NOT":96,"LITERAL_INT":97,"LITERAL_DOUBLE":98,"LITERAL_BOOLEAN":99,"LITERAL_CHAR":100,"LITERAL_STRING":101,"R_NULL":102,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"SEMICOLON",8:"R_IMPORT",13:"EQUAL",16:"R_DEFINE",17:"ID",18:"R_AS",19:"BRACKET_L",21:"BRACKET_R",22:"COMMA",23:"FILENAME",25:"CALL_CHAPUZ",27:"PAR_R",28:"BRACE_L",30:"BRACE_R",31:"R_PUBLIC",36:"R_WHILE",37:"PAR_L",38:"R_DO",39:"R_FOR",42:"R_SWITCH",44:"R_THROW",45:"R_TRY",46:"R_CATCH",47:"R_VAR",48:"COLONEQUAL",49:"R_CONST",50:"R_GLOBAL",52:"R_VOID",53:"ARRAY_CHAPUZ",54:"R_INTEGER",55:"R_DOUBLE",56:"R_CHAR",57:"R_BOOLEAN",58:"R_CONTINUE",59:"R_BREAK",60:"R_RETURN",61:"R_IF",63:"R_ELSE",65:"R_CASE",66:"COLON",67:"R_DEFAULT",75:"DOT",76:"R_STRC",77:"DOLLAR",78:"PLUSPLUS",79:"MINUSMINUS",80:"MINUS",81:"PLUS",82:"TIMES",83:"DIVIDE",84:"MODULE",85:"POW",86:"EQUALEQUALEQUAL",87:"EQUALEQUAL",88:"NOTEQUAL",89:"LESS",90:"LESSEQUAL",91:"GREATER",92:"GREATEREQUAL",93:"AND",94:"OR",95:"XOR",96:"NOT",97:"LITERAL_INT",98:"LITERAL_DOUBLE",99:"LITERAL_BOOLEAN",100:"LITERAL_CHAR",101:"LITERAL_STRING",102:"R_NULL"},
productions_: [0,[3,2],[4,2],[4,1],[4,3],[4,2],[4,2],[4,3],[6,2],[6,1],[6,1],[6,2],[6,4],[6,1],[15,6],[20,3],[20,1],[9,3],[9,1],[10,7],[10,8],[10,7],[10,8],[26,3],[26,1],[26,0],[29,2],[29,3],[29,0],[29,3],[32,1],[32,2],[32,4],[32,1],[32,1],[32,1],[32,1],[32,7],[32,8],[32,11],[32,10],[32,7],[32,2],[32,12],[32,2],[11,4],[11,4],[11,4],[11,4],[11,4],[11,2],[11,2],[12,3],[12,2],[33,3],[24,1],[24,3],[24,1],[24,1],[51,1],[51,1],[51,1],[51,1],[40,1],[40,1],[40,0],[41,1],[41,1],[41,0],[34,1],[34,1],[34,2],[34,3],[35,7],[35,8],[62,2],[62,4],[43,2],[43,1],[64,4],[64,3],[68,3],[68,1],[69,3],[69,1],[69,0],[70,4],[14,1],[14,3],[14,3],[14,1],[14,1],[14,1],[14,3],[14,3],[14,1],[14,1],[14,3],[14,4],[14,5],[14,5],[14,3],[14,2],[74,2],[74,2],[72,2],[72,3],[72,3],[72,3],[72,3],[72,3],[72,3],[73,3],[73,3],[73,3],[73,3],[73,3],[73,3],[73,3],[73,3],[73,3],[73,3],[73,2],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 var result = {ast:$$[$0-1], errores:_errores}; _errores = []; return result; 
break;
case 2: case 26: case 77:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 18: case 24: case 78: case 84:
 this.$ = [$$[$0]]; 
break;
case 4: case 27:
 $$[$0-2].push($$[$0-1]); this.$ = $$[$0-2]; 
break;
case 5:
 this.$ = [$$[$0-1]]; 
break;
case 6: case 25: case 28: case 85:
 this.$ = []; 
break;
case 7:
 this.$ = $$[$0-2] 
break;
case 8:
 this.$ = {type: TYPE_OP.IMPORT, imports: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 9: case 10: case 13: case 30: case 33: case 34: case 35: case 36: case 63: case 64: case 66: case 67: case 75: case 90: case 91: case 92: case 95: case 96:
 this.$ = $$[$0]; 
break;
case 11: case 31:
 this.$ = {type: TYPE_OP.DECLAR_LIST, jType: $$[$0-1].jType, l_id: $$[$0], exp: null, line: this._$.first_line, column: this._$.first_column}; $$[$0].unshift($$[$0-1].id); 
break;
case 12: case 32:
 this.$ = {type: TYPE_OP.DECLAR_LIST, jType: $$[$0-3].jType, l_id: $$[$0-2], exp: $$[$0], line: this._$.first_line, column: this._$.first_column}; $$[$0-2].unshift($$[$0-3].id) 
break;
case 14:
 this.$ = { type: TYPE_OP.DEFINE_STRC, id: $$[$0-4].toUpperCase(), l_declar: $$[$0-1], line: this._$.first_line, column: this._$.first_column}; 
break;
case 15:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]
break;
case 16: case 82:
 this.$ = [$$[$0]] 
break;
case 17: case 23: case 83:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 19: case 20: case 21: case 22:
 this.$ = {type: TYPE_OP.FUNC_DEF, returnType: $$[$0-6], name: $$[$0-5], params: $$[$0-4], block: $$[$0-1], line: this._$.first_line, column: this._$.first_column}; 
break;
case 29:
 this.$ = $$[$0-2]; 
break;
case 37:
 this.$ = {type: TYPE_OP.WHILE, cond: $$[$0-4], block: $$[$0-1], line: this._$.first_line, column: this._$.first_column}; 
break;
case 38:
 this.$ = {type: TYPE_OP.DO_WHILE, block: $$[$0-5], cond: $$[$0-1], line: this._$.first_line, column: this._$.first_column}; 
break;
case 39:
 this.$ = {type: TYPE_OP.FOR, init: $$[$0-8], cond: $$[$0-6], update: $$[$0-4], block: $$[$0-1], line: this._$.first_line, column: this._$.first_column}; 
break;
case 40:
 this.$ = {type: TYPE_OP.FOR, init: $$[$0-7], cond: null, update: $$[$0-4], block: $$[$0-1], line: this._$.first_line, column: this._$.first_column}; 
break;
case 41:
 this.$ = {type: TYPE_OP.SWITCH, switch: $$[$0-4], cases: $$[$0-1], line: this._$.first_line, column: this._$.first_column}; 
break;
case 42:
 this.$ = { type: TYPE_OP.THROW, exp: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 43:
 this.$ = {type: TYPE_OP.TRY, tryBlock: $$[$0-9], exceptionType: $$[$0-5], catchBlock: $$[$0-1], line: this._$.first_line, column: this._$.first_column}; 
break;
case 44:
 this.$ = $$[$0-1] 
break;
case 45:
 this.$ = {type: TYPE_OP.DECLAR, jType: $$[$0-3], id: $$[$0-2].toUpperCase(), exp: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 46: case 47: case 48:
 this.$ = {type: TYPE_OP.DECLAR, jType: $$[$0-3].toUpperCase(), id: $$[$0-2].toUpperCase(), exp: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 49:
 this.$ = {type: TYPE_OP.DECLAR, jType: $$[$0-3].toUpperCase(), id: $$[$0-2].toUpperCase(), exp: $$[$0], line: this._$.first_line, column: this._$.first_column, global: true}; 
break;
case 50:
 this.$ = {type: TYPE_OP.DECLAR, jType: $$[$0-1], id: $$[$0].toUpperCase(), exp: null, line: this._$.first_line, column: this._$.first_column}; 
break;
case 51:
 this.$ = {type: TYPE_OP.DECLAR, jType: $$[$0-1].toUpperCase(), id: $$[$0].toUpperCase(), exp: null, line: this._$.first_line, column: this._$.first_column}; 
break;
case 52:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0].toUpperCase()); 
break;
case 53:
 this.$ = [$$[$0].toUpperCase()] 
break;
case 54:
 this.$ = {type: TYPE_OP.ASSIGN, id:$$[$0-2], exp: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 55:
 this.$ = $$[$0] 
break;
case 56:
 this.$ = $$[$0-2] + "[]"
break;
case 57:
 this.$ = TYPE_VAL.VOID 
break;
case 58:
 this.$ = $$[$0].toUpperCase() 
break;
case 59:
 this.$ = TYPE_VAL.INTEGER 
break;
case 60:
 this.$ = TYPE_VAL.DOUBLE 
break;
case 61:
 this.$ = TYPE_VAL.CHAR 
break;
case 62:
 this.$ = TYPE_VAL.BOOLEAN 
break;
case 65: case 68:
 this.$ = null; 
break;
case 69:
 this.$ = {type: TYPE_OP.CONTINUE, line: this._$.first_line, column: this._$.first_column}; 
break;
case 70:
 this.$ = {type: TYPE_OP.BREAK, line: this._$.first_line, column: this._$.first_column}; 
break;
case 71:
 this.$ = {type: TYPE_OP.RETURN, exp: null, line: this._$.first_line, column: this._$.first_column}; 
break;
case 72:
 this.$ = {type: TYPE_OP.RETURN, exp: $$[$0-1], line: this._$.first_line, column: this._$.first_column}; 
break;
case 73:
 this.$ = {type: TYPE_OP.IF, cond: $$[$0-4], ifTrue: $$[$0-1], ifFalse: null, line: this._$.first_line, column: this._$.first_column}; 
break;
case 74:
 this.$ = {type: TYPE_OP.IF, cond: $$[$0-5], ifTrue: $$[$0-2], ifFalse: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 76:
 this.$ = {type: TYPE_OP.IF, cond: null, ifTrue: $$[$0-1], ifFalse: null, line: this._$.first_line, column: this._$.first_column}; 
break;
case 79:
 this.$ = {type: TYPE_OP.CASE, cond: $$[$0-2], ifTrue: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 80:
 this.$ = {type: TYPE_OP.CASE, cond: null, ifTrue: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 81:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2] 
break;
case 86:
 this.$ = {type: TYPE_OP.ACCESS, base: $$[$0-3], index: $$[$0-1], line: this._$.first_line, column: this._$.first_column}; 
break;
case 87:
 this.$ = { type: TYPE_OP.ID, val:$$[$0].toUpperCase(), line: this._$.first_line, column: this._$.first_column}; 
break;
case 88:
 this.$ = {type:TYPE_OP.CALL, call: $$[$0-2], params: $$[$0-1], line: this._$.first_line, column: this._$.first_column}; 
break;
case 89:
 this.$ = {type:TYPE_OP.CALL_JS, call: $$[$0-2], params: $$[$0-1], line: this._$.first_line, column: this._$.first_column}; 
break;
case 93:
 this.$ = {type: TYPE_OP.ARRAY_DEF, val: $$[$0-1], line: this._$.first_line, column: this._$.first_column}; 
break;
case 94:
 this.$ = $$[$0-1]; 
break;
case 97:
 this.$ = {type: TYPE_OP.DOT, base: $$[$0-2], next: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 98:
 this.$ = { type: TYPE_OP.CAST, endType: $$[$0-2], exp: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 99:
 this.$ = { type: TYPE_OP.STRC, jType: $$[$0-3].toUpperCase() + "[]", exp: $$[$0-1], line: this._$.first_line, column: this._$.first_column}; 
break;
case 100:
 this.$ = { type: TYPE_OP.STRC, jType: $$[$0-3] + "[]", exp: $$[$0-1], line: this._$.first_line, column: this._$.first_column}; 
break;
case 101:
 this.$ = { type: TYPE_OP.STRC, jType: $$[$0-1], exp: null, line: this._$.first_line, column: this._$.first_column}; 
break;
case 102:
 this.$ = {type: TYPE_OP.DOLLAR, exp: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 103:
 this.$ = {type: TYPE_OP.PLUSPLUS, op1: { type: TYPE_OP.ID, val:$$[$0-1].toUpperCase(), line: this._$.first_line, column: this._$.first_column}, line: this._$.first_line, column: this._$.first_column}; 
break;
case 104:
 this.$ = {type: TYPE_OP.MINUSMINUS, op1: { type: TYPE_OP.ID, val:$$[$0-1].toUpperCase(), line: this._$.first_line, column: this._$.first_column}, line: this._$.first_line, column: this._$.first_column}; 
break;
case 105:
 this.$ = {type: TYPE_OP.UMINUS, op1: $$[$0], op: $$[$0-1], line: this._$.first_line, column: this._$.first_column}; 
break;
case 106:
 this.$ = {type: TYPE_OP.PLUS, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 107:
 this.$ = {type: TYPE_OP.MINUS, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 108:
 this.$ = {type: TYPE_OP.TIMES, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 109:
 this.$ = {type: TYPE_OP.DIVIDE, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 110:
 this.$ = {type: TYPE_OP.MODULE, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 111:
 this.$ = {type: TYPE_OP.POW, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 112:
 this.$ = {type: TYPE_OP.EQUALEQUALEQUAL, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 113:
 this.$ = {type: TYPE_OP.EQUALEQUAL, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 114:
 this.$ = {type: TYPE_OP.NOTEQUAL, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 115:
 this.$ = {type: TYPE_OP.LESS, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 116:
 this.$ = {type: TYPE_OP.LESSEQUAL, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 117:
 this.$ = {type: TYPE_OP.GREATER, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 118:
 this.$ = {type: TYPE_OP.GREATEREQUAL, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 119:
 this.$ = {type: TYPE_OP.AND, op1: $$[$0-2], op:$$[$0-1], op2: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 120:
 this.$ = {type: TYPE_OP.OR, op1: $$[$0-2], op:$$[$0-1], op2: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 121:
 this.$ = {type: TYPE_OP.XOR, op1: $$[$0-2], op:$$[$0-1], op2: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 122:
 this.$ = {type: TYPE_OP.NOT, op1: $$[$0], op: $$[$0-1], line: this._$.first_line, column: this._$.first_column}; 
break;
case 123:
 this.$ = AST_API.newVal(TYPE_VAL.INTEGER, Number($$[$0]), this._$.first_line, this._$.first_column);
break;
case 124:
 this.$ = AST_API.newVal(TYPE_VAL.DOUBLE, Number($$[$0]), this._$.first_line, this._$.first_column);
break;
case 125:
 this.$ = AST_API.newVal(TYPE_VAL.BOOLEAN, $$[$0].toUpperCase() == "TRUE" ? 1 : 0, this._$.first_line, this._$.first_column); 
break;
case 126:
 this.$ = AST_API.newVal(TYPE_VAL.CHAR, $$[$0].charCodeAt(0), this._$.first_line, this._$.first_column); 
break;
case 127:
 this.$ = AST_API.newVal(TYPE_VAL.STRING, $$[$0], this._$.first_line, this._$.first_column); 
break;
case 128:
 this.$ = AST_API.newVal(TYPE_VAL.NULL, -1, this._$.first_line, this._$.first_column); 
break;
}
},
table: [{2:[1,4],3:1,4:2,6:3,8:$V0,10:6,11:7,15:8,16:$V1,17:$V2,24:9,31:$V3,47:$V4,49:$V5,50:$V6,51:16,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc},{1:[3]},{2:[1,25],5:[1,23],6:24,8:$V0,10:6,11:7,15:8,16:$V1,17:$V2,24:9,31:$V3,47:$V4,49:$V5,50:$V6,51:16,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc},o($Vd,[2,3],{7:[1,26]}),{7:[1,27]},{9:28,23:[1,29]},o($Ve,[2,9]),o($Ve,[2,10],{12:30,22:$Vf}),o($Ve,[2,13]),{17:$Vg,25:[1,32]},{17:[1,35],24:34,51:16,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc},{17:$Vh,25:[1,36]},{17:[1,38]},{17:[1,39]},{17:[1,40]},{17:[1,41]},o($Vi,[2,55],{19:[1,42]}),o($Vi,[2,57]),o($Vi,[2,58]),o($Vj,[2,59]),o($Vj,[2,60]),o($Vj,[2,61]),o($Vj,[2,62]),{1:[2,1]},o($Vd,[2,2],{7:[1,43]}),{7:[1,44]},o($Vd,[2,5]),o($Vd,[2,6]),o($Ve,[2,8],{22:[1,45]}),o($Vk,[2,18]),o($Ve,[2,11],{13:[1,46],22:$Vl}),{17:[1,48]},o($Vm,$Vn,{51:16,26:49,11:50,24:51,17:$Vo,47:$V4,49:$V5,50:$V6,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc}),o($Vp,[2,50],{13:[1,53]}),{25:[1,54]},{25:[1,55]},o($Vm,$Vn,{51:16,11:50,24:51,26:56,17:$Vo,47:$V4,49:$V5,50:$V6,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc}),o($Vp,[2,51],{13:[1,57]}),{48:[1,58]},{48:[1,59]},{48:[1,60]},{18:[1,61]},{21:[1,62]},o($Vd,[2,4]),o($Vd,[2,7]),{23:[1,63]},{14:64,17:$Vq,25:$Vr,28:$Vs,37:$Vt,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},{17:[1,84]},o($VE,[2,53]),{22:$VF,27:[1,85]},o($Vm,[2,24]),{17:$Vg},{17:$Vh},{14:87,17:$Vq,25:$Vr,28:$Vs,37:$Vt,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},o($Vm,$Vn,{51:16,11:50,24:51,26:88,17:$Vo,47:$V4,49:$V5,50:$V6,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc}),o($Vm,$Vn,{51:16,11:50,24:51,26:89,17:$Vo,47:$V4,49:$V5,50:$V6,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc}),{22:$VF,27:[1,90]},{14:91,17:$Vq,25:$Vr,28:$Vs,37:$Vt,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},{14:92,17:$Vq,25:$Vr,28:$Vs,37:$Vt,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},{14:93,17:$Vq,25:$Vr,28:$Vs,37:$Vt,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},{14:94,17:$Vq,25:$Vr,28:$Vs,37:$Vt,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},{19:[1,95]},o($Vi,[2,56]),o($Vk,[2,17]),o($Ve,[2,12],{19:$VG,75:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX}),o($VY,$VZ,{78:$V_,79:$V$}),o($Vm,$V01,{71:67,72:68,73:69,70:72,74:73,69:116,68:117,14:118,33:119,17:$Vq,25:$Vr,28:$Vs,37:$Vt,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD}),o($VY,[2,90]),o($VY,[2,91]),o($VY,[2,92]),o($V11,$V01,{71:67,72:68,73:69,70:72,74:73,69:120,14:121,17:$Vq,25:$Vr,28:$Vs,37:$Vt,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD}),{14:122,17:$Vq,25:$Vr,28:$Vs,37:$Vt,51:123,54:$V9,55:$Va,56:$Vb,57:$Vc,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},o($VY,[2,95]),o($VY,[2,96]),{17:[1,124],25:[1,126],51:125,54:$V9,55:$Va,56:$Vb,57:$Vc},{14:127,17:$Vq,25:$Vr,28:$Vs,37:$Vt,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},o($VY,[2,123]),o($VY,[2,124]),o($VY,[2,125]),o($VY,[2,126]),o($VY,[2,127]),o($VY,[2,128]),{14:128,17:$Vq,25:$Vr,28:$Vs,37:$Vt,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},{14:129,17:$Vq,25:$Vr,28:$Vs,37:$Vt,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},o($VE,[2,52]),{28:[1,130]},{11:131,17:$Vo,24:51,47:$V4,49:$V5,50:$V6,51:16,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc},o($V21,[2,45],{19:$VG,75:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX}),{22:$VF,27:[1,132]},{22:$VF,27:[1,133]},{28:[1,134]},o($V21,[2,46],{19:$VG,75:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX}),o($V21,[2,47],{19:$VG,75:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX}),o($V21,[2,48],{19:$VG,75:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX}),o($V21,[2,49],{19:$VG,75:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX}),{11:136,17:$Vo,20:135,24:51,47:$V4,49:$V5,50:$V6,51:16,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc},{14:137,17:$Vq,25:$Vr,28:$Vs,37:$Vt,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},{14:138,17:$Vq,25:$Vr,28:$Vs,37:$Vt,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},{14:139,17:$Vq,25:$Vr,28:$Vs,37:$Vt,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},{14:140,17:$Vq,25:$Vr,28:$Vs,37:$Vt,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},{14:141,17:$Vq,25:$Vr,28:$Vs,37:$Vt,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},{14:142,17:$Vq,25:$Vr,28:$Vs,37:$Vt,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},{14:143,17:$Vq,25:$Vr,28:$Vs,37:$Vt,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},{14:144,17:$Vq,25:$Vr,28:$Vs,37:$Vt,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},{14:145,17:$Vq,25:$Vr,28:$Vs,37:$Vt,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},{14:146,17:$Vq,25:$Vr,28:$Vs,37:$Vt,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},{14:147,17:$Vq,25:$Vr,28:$Vs,37:$Vt,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},{14:148,17:$Vq,25:$Vr,28:$Vs,37:$Vt,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},{14:149,17:$Vq,25:$Vr,28:$Vs,37:$Vt,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},{14:150,17:$Vq,25:$Vr,28:$Vs,37:$Vt,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},{14:151,17:$Vq,25:$Vr,28:$Vs,37:$Vt,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},{14:152,17:$Vq,25:$Vr,28:$Vs,37:$Vt,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},{14:153,17:$Vq,25:$Vr,28:$Vs,37:$Vt,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},{14:154,17:$Vq,25:$Vr,28:$Vs,37:$Vt,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},o($VY,[2,103]),o($VY,[2,104]),{22:$V31,27:[1,155]},{22:[1,158],27:[1,157]},o($Vm,$V41,{13:$V51,19:$VG,75:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX}),o($Vm,[2,82]),{22:$V31,30:[1,160]},o($V11,$V41,{19:$VG,75:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX}),{19:$VG,27:[1,161],75:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX},{27:[1,162]},{19:[1,163]},{19:[1,164]},{27:[1,165]},o($V61,[2,102],{19:$VG,75:$VH}),o($V61,[2,105],{19:$VG,75:$VH}),o($V61,[2,122],{19:$VG,75:$VH}),o($V71,$V81,{29:166}),o($Vm,[2,23]),{28:[1,167]},{28:[1,168]},o($V71,$V81,{29:169}),{21:[1,170],22:[1,171]},o($V91,[2,16]),o($VY,[2,97]),o($Va1,[2,106],{19:$VG,75:$VH,82:$VK,83:$VL,84:$VM,85:$VN}),o($Va1,[2,107],{19:$VG,75:$VH,82:$VK,83:$VL,84:$VM,85:$VN}),o($Vb1,[2,108],{19:$VG,75:$VH,85:$VN}),o($Vb1,[2,109],{19:$VG,75:$VH,85:$VN}),o($Vb1,[2,110],{19:$VG,75:$VH,85:$VN}),o($Vb1,[2,111],{19:$VG,75:$VH,85:$VN}),o($Vc1,[2,112],{19:$VG,75:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,89:$VR,90:$VS,91:$VT,92:$VU}),o($Vc1,[2,113],{19:$VG,75:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,89:$VR,90:$VS,91:$VT,92:$VU}),o($Vc1,[2,114],{19:$VG,75:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,89:$VR,90:$VS,91:$VT,92:$VU}),o($Vd1,[2,115],{19:$VG,75:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN}),o($Vd1,[2,116],{19:$VG,75:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN}),o($Vd1,[2,117],{19:$VG,75:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN}),o($Vd1,[2,118],{19:$VG,75:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN}),o([2,5,7,8,13,16,17,21,22,25,27,28,30,31,36,37,38,39,42,44,45,47,49,50,52,53,54,55,56,57,58,59,60,61,65,66,67,76,77,93,94,95,96,97,98,99,100,101,102],[2,119],{19:$VG,75:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU}),o([2,5,7,8,13,16,17,21,22,25,27,28,30,31,36,37,38,39,42,44,45,47,49,50,52,53,54,55,56,57,58,59,60,61,65,66,67,76,77,94,95,96,97,98,99,100,101,102],[2,120],{19:$VG,75:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV}),o([2,5,7,8,13,16,17,21,22,25,27,28,30,31,36,37,38,39,42,44,45,47,49,50,52,53,54,55,56,57,58,59,60,61,65,66,67,76,77,95,96,97,98,99,100,101,102],[2,121],{19:$VG,75:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW}),{19:$VG,21:[1,172],75:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX},o($VY,[2,88]),{14:173,17:$Vq,25:$Vr,28:$Vs,37:$Vt,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},o($VY,[2,89]),{14:175,17:$Vq,25:$Vr,28:$Vs,33:174,37:$Vt,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},{14:176,17:$Vq,25:$Vr,28:$Vs,37:$Vt,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},o($VY,[2,93]),o($VY,[2,94]),{14:177,17:$Vq,25:$Vr,28:$Vs,37:$Vt,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},{14:178,17:$Vq,25:$Vr,28:$Vs,37:$Vt,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},{14:179,17:$Vq,25:$Vr,28:$Vs,37:$Vt,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},o($VY,[2,101]),{2:$Ve1,11:183,14:194,15:186,16:$V1,17:$Vf1,24:51,25:$Vr,28:$Vs,30:[1,180],32:181,33:184,34:185,35:187,36:$Vg1,37:$Vt,38:$Vh1,39:$Vi1,42:$Vj1,44:$Vk1,45:$Vl1,47:$V4,49:$V5,50:$V6,51:16,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vm1,59:$Vn1,60:$Vo1,61:$Vp1,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},o($V71,$V81,{29:200}),o($V71,$V81,{29:201}),{2:$Ve1,11:183,14:194,15:186,16:$V1,17:$Vf1,24:51,25:$Vr,28:$Vs,30:[1,202],32:181,33:184,34:185,35:187,36:$Vg1,37:$Vt,38:$Vh1,39:$Vi1,42:$Vj1,44:$Vk1,45:$Vl1,47:$V4,49:$V5,50:$V6,51:16,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vm1,59:$Vn1,60:$Vo1,61:$Vp1,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},o([2,5,7,8,16,17,25,28,30,31,36,37,38,39,42,44,45,47,49,50,52,53,54,55,56,57,58,59,60,61,65,67,76,77,80,96,97,98,99,100,101,102],[2,14]),{11:203,17:$Vo,24:51,47:$V4,49:$V5,50:$V6,51:16,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc},o($VY,[2,86]),o([22,27,30],[2,83],{19:$VG,75:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX}),o($Vm,[2,81]),{13:$V51,19:$VG,75:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX},o([2,7,16,17,22,25,27,28,30,36,37,38,39,42,44,45,47,49,50,52,53,54,55,56,57,58,59,60,61,65,67,76,77,96,97,98,99,100,101,102],[2,54],{19:$VG,75:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX}),o($V61,[2,98],{19:$VG,75:$VH}),{19:$VG,21:[1,204],75:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX},{19:$VG,21:[1,205],75:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX},o($Ve,[2,19]),o($Vq1,[2,26],{7:[1,206]}),{7:[1,207]},o($Vr1,[2,30],{12:208,22:$Vf}),o($Vr1,[2,33]),o($Vr1,[2,34]),o($Vr1,[2,35]),o($Vr1,[2,36]),{37:[1,209]},{28:[1,210]},{37:[1,211]},{37:[1,212]},{14:213,17:$Vq,25:$Vr,28:$Vs,37:$Vt,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},{28:[1,214]},{7:[1,215],13:$V51,19:$VG,75:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX},o([7,13,19,75,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95],$VZ,{17:$Vh,78:$V_,79:$V$}),o($Vr1,[2,69]),o($Vr1,[2,70]),{7:[1,216],14:217,17:$Vq,25:$Vr,28:$Vs,37:$Vt,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},{37:[1,218]},{2:$Ve1,11:183,14:194,15:186,16:$V1,17:$Vf1,24:51,25:$Vr,28:$Vs,30:[1,219],32:181,33:184,34:185,35:187,36:$Vg1,37:$Vt,38:$Vh1,39:$Vi1,42:$Vj1,44:$Vk1,45:$Vl1,47:$V4,49:$V5,50:$V6,51:16,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vm1,59:$Vn1,60:$Vo1,61:$Vp1,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},{2:$Ve1,11:183,14:194,15:186,16:$V1,17:$Vf1,24:51,25:$Vr,28:$Vs,30:[1,220],32:181,33:184,34:185,35:187,36:$Vg1,37:$Vt,38:$Vh1,39:$Vi1,42:$Vj1,44:$Vk1,45:$Vl1,47:$V4,49:$V5,50:$V6,51:16,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vm1,59:$Vn1,60:$Vo1,61:$Vp1,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},o($Ve,[2,21]),o($V91,[2,15]),o($VY,[2,99]),o($VY,[2,100]),o($Vq1,[2,27]),o($Vq1,[2,29]),o($Vr1,[2,31],{13:[1,221],22:$Vl}),{14:222,17:$Vq,25:$Vr,28:$Vs,37:$Vt,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},o($V71,$V81,{29:223}),{7:[2,65],11:225,14:175,17:$Vf1,24:51,25:$Vr,28:$Vs,33:226,37:$Vt,40:224,47:$V4,49:$V5,50:$V6,51:16,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},{14:227,17:$Vq,25:$Vr,28:$Vs,37:$Vt,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},o($Vs1,[2,42],{19:$VG,75:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX}),o($V71,$V81,{29:228}),o($Vr1,[2,44]),o($Vr1,[2,71]),{7:[1,229],19:$VG,75:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX},{14:230,17:$Vq,25:$Vr,28:$Vs,37:$Vt,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},o($Ve,[2,20]),o($Ve,[2,22]),{14:231,17:$Vq,25:$Vr,28:$Vs,37:$Vt,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},{19:$VG,27:[1,232],75:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX},{2:$Ve1,11:183,14:194,15:186,16:$V1,17:$Vf1,24:51,25:$Vr,28:$Vs,30:[1,233],32:181,33:184,34:185,35:187,36:$Vg1,37:$Vt,38:$Vh1,39:$Vi1,42:$Vj1,44:$Vk1,45:$Vl1,47:$V4,49:$V5,50:$V6,51:16,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vm1,59:$Vn1,60:$Vo1,61:$Vp1,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},{7:[1,234]},{7:[2,63]},{7:[2,64]},{19:$VG,27:[1,235],75:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX},{2:$Ve1,11:183,14:194,15:186,16:$V1,17:$Vf1,24:51,25:$Vr,28:$Vs,30:[1,236],32:181,33:184,34:185,35:187,36:$Vg1,37:$Vt,38:$Vh1,39:$Vi1,42:$Vj1,44:$Vk1,45:$Vl1,47:$V4,49:$V5,50:$V6,51:16,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vm1,59:$Vn1,60:$Vo1,61:$Vp1,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},o($Vr1,[2,72]),{19:$VG,27:[1,237],75:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX},o($Vs1,[2,32],{19:$VG,75:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX}),{28:[1,238]},{36:[1,239]},{7:[1,241],14:240,17:$Vq,25:$Vr,28:$Vs,37:$Vt,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},{28:[1,242]},{46:[1,243]},{28:[1,244]},o($V71,$V81,{29:245}),{37:[1,246]},{7:[1,247],19:$VG,75:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX},{14:250,17:$Vq,25:$Vr,27:$Vt1,28:$Vs,33:249,37:$Vt,41:248,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},{43:251,64:252,65:$Vu1,67:$Vv1},{37:[1,255]},o($V71,$V81,{29:256}),{2:$Ve1,11:183,14:194,15:186,16:$V1,17:$Vf1,24:51,25:$Vr,28:$Vs,30:[1,257],32:181,33:184,34:185,35:187,36:$Vg1,37:$Vt,38:$Vh1,39:$Vi1,42:$Vj1,44:$Vk1,45:$Vl1,47:$V4,49:$V5,50:$V6,51:16,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vm1,59:$Vn1,60:$Vo1,61:$Vp1,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},{14:258,17:$Vq,25:$Vr,28:$Vs,37:$Vt,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},{14:250,17:$Vq,25:$Vr,27:$Vt1,28:$Vs,33:249,37:$Vt,41:259,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},{27:[1,260]},{27:[2,66]},{13:$V51,19:$VG,27:[2,67],75:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX},{30:[1,261],64:262,65:$Vu1,67:$Vv1},o($Vw1,[2,78]),{14:263,17:$Vq,25:$Vr,28:$Vs,37:$Vt,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},{66:[1,264]},{17:[1,265]},{2:$Ve1,11:183,14:194,15:186,16:$V1,17:$Vf1,24:51,25:$Vr,28:$Vs,30:[1,266],32:181,33:184,34:185,35:187,36:$Vg1,37:$Vt,38:$Vh1,39:$Vi1,42:$Vj1,44:$Vk1,45:$Vl1,47:$V4,49:$V5,50:$V6,51:16,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vm1,59:$Vn1,60:$Vo1,61:$Vp1,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},o($Vr1,[2,37]),{19:$VG,27:[1,267],75:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX},{27:[1,268]},{28:[1,269]},o($Vr1,[2,41]),o($Vw1,[2,77]),{19:$VG,66:[1,270],75:$VH,80:$VI,81:$VJ,82:$VK,83:$VL,84:$VM,85:$VN,86:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT,92:$VU,93:$VV,94:$VW,95:$VX},o($Vq1,$V81,{29:271}),{17:[1,272]},o($Vr1,[2,73],{62:273,63:[1,274]}),o($Vr1,[2,38]),{28:[1,275]},o($V71,$V81,{29:276}),o($Vq1,$V81,{29:277}),o($Vw1,[2,80],{51:16,24:51,71:67,72:68,73:69,70:72,74:73,32:181,11:183,33:184,34:185,15:186,35:187,14:194,2:$Ve1,16:$V1,17:$Vf1,25:$Vr,28:$Vs,36:$Vg1,37:$Vt,38:$Vh1,39:$Vi1,42:$Vj1,44:$Vk1,45:$Vl1,47:$V4,49:$V5,50:$V6,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vm1,59:$Vn1,60:$Vo1,61:$Vp1,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD}),{27:[1,278]},o($Vr1,[2,74]),{28:[1,280],35:279,61:$Vp1},o($V71,$V81,{29:281}),{2:$Ve1,11:183,14:194,15:186,16:$V1,17:$Vf1,24:51,25:$Vr,28:$Vs,30:[1,282],32:181,33:184,34:185,35:187,36:$Vg1,37:$Vt,38:$Vh1,39:$Vi1,42:$Vj1,44:$Vk1,45:$Vl1,47:$V4,49:$V5,50:$V6,51:16,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vm1,59:$Vn1,60:$Vo1,61:$Vp1,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},o($Vw1,[2,79],{51:16,24:51,71:67,72:68,73:69,70:72,74:73,32:181,11:183,33:184,34:185,15:186,35:187,14:194,2:$Ve1,16:$V1,17:$Vf1,25:$Vr,28:$Vs,36:$Vg1,37:$Vt,38:$Vh1,39:$Vi1,42:$Vj1,44:$Vk1,45:$Vl1,47:$V4,49:$V5,50:$V6,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vm1,59:$Vn1,60:$Vo1,61:$Vp1,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD}),{28:[1,283]},o($Vr1,[2,75]),o($V71,$V81,{29:284}),{2:$Ve1,11:183,14:194,15:186,16:$V1,17:$Vf1,24:51,25:$Vr,28:$Vs,30:[1,285],32:181,33:184,34:185,35:187,36:$Vg1,37:$Vt,38:$Vh1,39:$Vi1,42:$Vj1,44:$Vk1,45:$Vl1,47:$V4,49:$V5,50:$V6,51:16,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vm1,59:$Vn1,60:$Vo1,61:$Vp1,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},o($Vr1,[2,40]),o($V71,$V81,{29:286}),{2:$Ve1,11:183,14:194,15:186,16:$V1,17:$Vf1,24:51,25:$Vr,28:$Vs,30:[1,287],32:181,33:184,34:185,35:187,36:$Vg1,37:$Vt,38:$Vh1,39:$Vi1,42:$Vj1,44:$Vk1,45:$Vl1,47:$V4,49:$V5,50:$V6,51:16,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vm1,59:$Vn1,60:$Vo1,61:$Vp1,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},o($Vr1,[2,39]),{2:$Ve1,11:183,14:194,15:186,16:$V1,17:$Vf1,24:51,25:$Vr,28:$Vs,30:[1,288],32:181,33:184,34:185,35:187,36:$Vg1,37:$Vt,38:$Vh1,39:$Vi1,42:$Vj1,44:$Vk1,45:$Vl1,47:$V4,49:$V5,50:$V6,51:16,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,57:$Vc,58:$Vm1,59:$Vn1,60:$Vo1,61:$Vp1,70:72,71:67,72:68,73:69,74:73,76:$Vu,77:$Vv,80:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB,101:$VC,102:$VD},o($Vr1,[2,76]),o($Vr1,[2,43])],
defaultActions: {23:[2,1],225:[2,63],226:[2,64],249:[2,66]},
parseError: function parseError (str, hash) {
    console.log(hash);
    _errores.push({type:"SINTAX", detail:`Found: ${hash.token}\nExpected: ${hash.expected.join(' ').split("'").join("")}`, line: hash.loc.first_line, column: hash.loc.first_column})
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    var strBuffer = "";
    var _errores = []
	const TYPE_OP = require('./util').TYPE_OP;
	const TYPE_VAL = require('./util').TYPE_VAL;
	const AST_API = require('./util').AST_API;

    /**
        parser.parseError = (str, hash) => {
    _errores.push({type:"SINTAX", detail:`Found: ${hash.token}\nExpected: ${hash.expected.join(' ').split("'").join("")}`, line: hash.loc.first_line, column: hash.loc.first_column})
            if (hash.recoverable) {
                this.trace(str);
            } else {
                var error = new Error(str);
                error.hash = hash;
                throw error;
            }
        };
    */
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:/* IGNORE */
break;
case 2:/* IGNORE */
break;
case 3:return 75;
break;
case 4:return 7;
break;
case 5:return "COMMA";
break;
case 6:return "COLONEQUAL"
break;
case 7:return 'TERNARY';
break;
case 8:return "COLON";
break;
case 9:return 78;
break;
case 10:return 79;
break;
case 11:return 81;
break;
case 12:return 80;
break;
case 13:return 82;
break;
case 14:return 83;
break;
case 15:return 84;
break;
case 16:return "POW"
break;
case 17:return 90;
break;
case 18:return "LESS";
break;
case 19:return 92;
break;
case 20:return 91;
break;
case 21:return 86;
break;
case 22:return 87;
break;
case 23:return 88;
break;
case 24:return "EQUAL";
break;
case 25:return "BRACKET_L";
break;
case 26:return 21;
break;
case 27:return 37;
break;
case 28:return 27;
break;
case 29:return 28;
break;
case 30:return 30;
break;
case 31:return 93;
break;
case 32:return 94;
break;
case 33:return 95;
break;
case 34:return 96;
break;
case 35:return 77;
break;
case 36:return 102;
break;
case 37:return 54;
break;
case 38:return 55;
break;
case 39:return 56;
break;
case 40:return 57;
break;
case 41:return 8;
break;
case 42:return 47;
break;
case 43:return "R_CONST";
break;
case 44:return "R_GLOBAL";
break;
case 45:return 61;
break;
case 46:return 63;
break;
case 47:return 42;
break;
case 48:return 65;
break;
case 49:return 58;
break;
case 50:return 59;
break;
case 51:return 60;
break;
case 52:return 39;
break;
case 53:return 36;
break;
case 54:return 38;
break;
case 55:return 52;
break;
case 56:return "R_DEFINE";
break;
case 57:return "R_AS";
break;
case 58:return "R_STRC";
break;
case 59:return "R_TRY";
break;
case 60:return "R_CATCH";
break;
case 61:return "R_THROW";
break;
case 62:return 99;
break;
case 63:return 99;
break;
case 64:return 98;
break;
case 65:return 97;
break;
case 66: strBuffer = ""; this.begin('STRING'); 
break;
case 67: this.begin('CHAR'); 
break;
case 68:return 23;
break;
case 69: yy_.yytext = yy_.yytext.split(" ").join("").toUpperCase(); return 53;
break;
case 70: yy_.yytext = yy_.yytext.replace("(", "").split(" ").join("").toUpperCase(); return 25;
break;
case 71:return 17;
break;
case 72: this.popState(); yy_.yytext = strBuffer; return 101; 
break;
case 73: strBuffer += "\""; 
break;
case 74: strBuffer += "\\"; 
break;
case 75: strBuffer += "\n"; 
break;
case 76: strBuffer += "\r"; 
break;
case 77: strBuffer += "\t"; 
break;
case 78: strBuffer += yy_.yytext; 
break;
case 79: console.log("TODO error unclosed String"); 
break;
case 80: yy_.yytext = "'"; this.popState(); return 100; 
break;
case 81: yy_.yytext = "\\"; this.popState(); return 100; 
break;
case 82: yy_.yytext = "\n"; this.popState(); return 100; 
break;
case 83: yy_.yytext = "\t"; this.popState(); return 100; 
break;
case 84: yy_.yytext = "\t"; this.popState(); return 100; 
break;
case 85: yy_.yytext = "\0"; this.popState(); return 100; 
break;
case 86: yy_.yytext = yy_.yytext.slice(0, -1);  this.popState(); return 100; 
break;
case 87: yy_.yytext = "\0"; this.popState(); return 100; 
break;
case 88: console.log("TODO error invalid Char... skipping"); this.popState(); 
break;
case 89:return 5;
break;
case 90: 
        _errores.push({type:"LEXICO", detail:`Unknown token '${yy_.yytext}'`, line: yy_.yylloc.first_line, column: yy_.yylloc.first_column});
    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\.)/i,/^(?:;)/i,/^(?:,)/i,/^(?::=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\^\^)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:===)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\^)/i,/^(?:!)/i,/^(?:\$)/i,/^(?:null\b)/i,/^(?:integer\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:import\b)/i,/^(?:var\b)/i,/^(?:const\b)/i,/^(?:global\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:continue\b)/i,/^(?:break\b)/i,/^(?:return\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:void\b)/i,/^(?:define\b)/i,/^(?:as\b)/i,/^(?:strc\b)/i,/^(?:try\b)/i,/^(?:catch\b)/i,/^(?:throw\b)/i,/^(?:false\b)/i,/^(?:true\b)/i,/^(?:[0-9]+\.[0-9]*)/i,/^(?:[0-9]+)/i,/^(?:")/i,/^(?:')/i,/^(?:([a-zA-Z])[a-zA-ZñÑ0-9_.]*\.j\b)/i,/^(?:([a-zA-Z])[a-zA-ZñÑ0-9_]*\s*\[\])/i,/^(?:([a-zA-Z])[a-zA-ZñÑ0-9_]*\s*\()/i,/^(?:([a-zA-Z])[a-zA-ZñÑ0-9_]*)/i,/^(?:")/i,/^(?:\\")/i,/^(?:\\\\)/i,/^(?:\\n)/i,/^(?:\\r)/i,/^(?:\\t)/i,/^(?:.)/i,/^(?:$)/i,/^(?:\\'')/i,/^(?:\\\\')/i,/^(?:\\n')/i,/^(?:\\r')/i,/^(?:\\t')/i,/^(?:\\0')/i,/^(?:[^']')/i,/^(?:')/i,/^(?:.)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"CHAR":{"rules":[80,81,82,83,84,85,86,87,88],"inclusive":false},"STRING":{"rules":[72,73,74,75,76,77,78,79],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,89,90],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}