/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,13],$V2=[1,16],$V3=[1,9],$V4=[1,10],$V5=[1,11],$V6=[1,12],$V7=[1,15],$V8=[1,17],$V9=[5,8,13,14,28,45,47,48,50,51],$Va=[5,7,8,13,14,28,45,47,48,50,51],$Vb=[5,7,8,13,14,19,28,45,47,48,50,51],$Vc=[2,40],$Vd=[1,34],$Ve=[19,24],$Vf=[2,19],$Vg=[1,47],$Vh=[1,52],$Vi=[1,51],$Vj=[1,55],$Vk=[1,56],$Vl=[1,63],$Vm=[1,57],$Vn=[1,58],$Vo=[1,59],$Vp=[1,60],$Vq=[1,61],$Vr=[1,62],$Vs=[1,70],$Vt=[5,7,8,13,14,18,19,22,24,25,27,28,31,33,35,36,39,41,42,45,47,48,50,51,56,60,62,72,73,76,89,90,91,92,93,94],$Vu=[1,76],$Vv=[1,72],$Vw=[1,73],$Vx=[1,75],$Vy=[5,7,8,13,14,16,18,19,22,24,25,27,28,31,33,35,36,39,41,42,44,45,47,48,50,51,56,60,61,62,69,71,72,73,76,77,89,90,91,92,93,94],$Vz=[2,73],$VA=[1,77],$VB=[1,78],$VC=[19,27],$VD=[2,71],$VE=[1,101],$VF=[2,70],$VG=[1,74],$VH=[5,7,8,13,14,18,19,24,25,27,28,31,33,35,36,39,41,42,44,45,47,48,50,51,56,60,61,62,69,72,73,76,77,89,90,91,92,93,94],$VI=[18,19],$VJ=[13,14,22,25,27,31,33,35,36,39,41,42,45,47,48,50,51,56,72,73,76,89,90,91,92,93,94],$VK=[2,22],$VL=[1,115],$VM=[1,139],$VN=[1,128],$VO=[1,131],$VP=[1,132],$VQ=[1,133],$VR=[1,134],$VS=[1,135],$VT=[1,136],$VU=[1,138],$VV=[13,14,22,25,27,31,33,35,36,39,41,42,45,47,48,50,51,56,60,62,72,73,76,89,90,91,92,93,94],$VW=[7,13,14,22,25,27,31,33,35,36,39,41,42,45,47,48,50,51,56,60,62,72,73,76,89,90,91,92,93,94],$VX=[2,52],$VY=[1,186],$VZ=[1,187],$V_=[27,60,62];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"l_global":4,"EOF":5,"global":6,"SEMICOLON":7,"R_IMPORT":8,"import_list":9,"funcDeclar":10,"varDeclar":11,"defineStruct":12,"R_DEFINE":13,"ID":14,"R_AS":15,"BRACKET_L":16,"l_declar":17,"BRACKET_R":18,"COMMA":19,"FILENAME":20,"type":21,"PAR_L":22,"l_param":23,"PAR_R":24,"BRACE_L":25,"l_statement":26,"BRACE_R":27,"R_PUBLIC":28,"statement":29,"varAssign":30,"jump_control":31,"if":32,"R_WHILE":33,"exp":34,"R_DO":35,"R_FOR":36,"for_init":37,"for_update":38,"R_SWITCH":39,"l_case":40,"R_THROW":41,"R_TRY":42,"R_CATCH":43,"EQUAL":44,"R_VAR":45,"COLONEQUAL":46,"R_CONST":47,"R_GLOBAL":48,"primType":49,"R_VOID":50,"R_INTEGER":51,"jump":52,"R_CONTINUE":53,"R_BREAK":54,"R_RETURN":55,"R_IF":56,"if_else":57,"R_ELSE":58,"case":59,"R_CASE":60,"COLON":61,"R_DEFAULT":62,"call":63,"l_exp":64,"l_assign":65,"access":66,"atomic":67,"exp_arithmetic":68,"TERNARY":69,"update":70,"DOT":71,"R_STRC":72,"DOLLAR":73,"PLUSPLUS":74,"MINUSMINUS":75,"MINUS":76,"PLUS":77,"exp_logic":78,"EQUALEQUAL":79,"NOTEQUAL":80,"LESS":81,"LESSEQUAL":82,"GREATER":83,"GREATEREQUAL":84,"AND":85,"OR":86,"XOR":87,"NOT":88,"LITERAL_INT":89,"LITERAL_DOUBLE":90,"LITERAL_BOOLEAN":91,"LITERAL_CHAR":92,"LITERAL_STRING":93,"R_NULL":94,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"SEMICOLON",8:"R_IMPORT",13:"R_DEFINE",14:"ID",15:"R_AS",16:"BRACKET_L",18:"BRACKET_R",19:"COMMA",20:"FILENAME",22:"PAR_L",24:"PAR_R",25:"BRACE_L",27:"BRACE_R",28:"R_PUBLIC",31:"jump_control",33:"R_WHILE",35:"R_DO",36:"R_FOR",39:"R_SWITCH",41:"R_THROW",42:"R_TRY",43:"R_CATCH",44:"EQUAL",45:"R_VAR",46:"COLONEQUAL",47:"R_CONST",48:"R_GLOBAL",50:"R_VOID",51:"R_INTEGER",53:"R_CONTINUE",54:"R_BREAK",55:"R_RETURN",56:"R_IF",58:"R_ELSE",60:"R_CASE",61:"COLON",62:"R_DEFAULT",69:"TERNARY",71:"DOT",72:"R_STRC",73:"DOLLAR",74:"PLUSPLUS",75:"MINUSMINUS",76:"MINUS",77:"PLUS",79:"EQUALEQUAL",80:"NOTEQUAL",81:"LESS",82:"LESSEQUAL",83:"GREATER",84:"GREATEREQUAL",85:"AND",86:"OR",87:"XOR",88:"NOT",89:"LITERAL_INT",90:"LITERAL_DOUBLE",91:"LITERAL_BOOLEAN",92:"LITERAL_CHAR",93:"LITERAL_STRING",94:"R_NULL"},
productions_: [0,[3,2],[4,2],[4,1],[4,3],[4,2],[6,2],[6,1],[6,1],[6,1],[12,6],[17,3],[17,1],[9,3],[9,1],[10,8],[10,9],[23,3],[23,1],[23,0],[26,2],[26,3],[26,0],[29,1],[29,1],[29,1],[29,1],[29,1],[29,7],[29,8],[29,11],[29,10],[29,7],[29,2],[29,12],[29,2],[11,4],[11,4],[11,4],[11,4],[11,2],[30,3],[21,1],[21,3],[21,1],[21,3],[49,1],[37,1],[37,1],[37,0],[38,1],[38,1],[38,0],[52,1],[52,1],[52,2],[52,3],[32,7],[32,8],[57,2],[57,4],[40,2],[40,1],[59,4],[59,3],[63,4],[63,4],[65,3],[65,1],[64,3],[64,1],[64,0],[66,4],[34,1],[34,1],[34,1],[34,1],[34,3],[34,5],[34,3],[34,1],[34,1],[34,3],[34,4],[34,5],[34,5],[34,4],[34,2],[70,2],[70,2],[68,2],[68,3],[78,3],[78,3],[78,3],[78,3],[78,3],[78,3],[78,3],[78,3],[78,3],[78,2],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2: case 20: case 61:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 14: case 18: case 62: case 70:
 this.$ = [$$[$0]]; 
break;
case 4: case 21:
 $$[$0-2].push($$[$0-1]); this.$ = $$[$0-2]; 
break;
case 5:
 this.$ = [$$[$0-1]]; 
break;
case 6:
 this.$ = {type: TYPE_OP.IMPORT, import: $$[$0] };
break;
case 7: case 8: case 9: case 23: case 24: case 25: case 26: case 27: case 47: case 48: case 50: case 51: case 59: case 74: case 75: case 76: case 80: case 81:
 this.$ = $$[$0]; 
break;
case 10:
 this.$ = { type: TYPE_OP.DEFINE_STRC, id: $$[$0-4], l_declar: $$[$0-1]} 
break;
case 11:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]
break;
case 12: case 68:
 this.$ = [$$[$0]] 
break;
case 13: case 17: case 69:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 15: case 16:
 this.$ = {type: TYPE_OP.FUNC_DEF, returnType: $$[$0-7], name: $$[$0-6], params: $$[$0-4], block: $$[$0-1] }; 
break;
case 19: case 22: case 71:
 this.$ = []; 
break;
case 28:
 this.$ = {type: TYPE_OP.WHILE, cond: $$[$0-4], block: $$[$0-1] }; 
break;
case 29:
 this.$ = {type: TYPE_OP.DO_WHILE, block: $$[$0-5], cond: $$[$0-1] }; 
break;
case 30:
 this.$ = {type: TYPE_OP.FOR, init: $$[$0-8], cond: $$[$0-6], update: $$[$0-4], block: $$[$0-1] }; 
break;
case 31:
 this.$ = {type: TYPE_OP.FOR, init: $$[$0-7], cond: null, update: $$[$0-4], block: $$[$0-1] }; 
break;
case 32:
 this.$ = {type: TYPE_OP.SWITCH, switch: $$[$0-4], cases: $$[$0-1] }; 
break;
case 33:
 this.$ = { type: TYPE_OP.THROW, exp: $$[$0]}
break;
case 34:
 this.$ = {type: TYPE_OP.TRY, tryBlock: $$[$0-9], exceptionType: $$[$0-5], catchBlock: $$[$0-1]}; 
break;
case 36: case 37: case 38: case 39:
 this.$ = {type: TYPE_OP.DECLAR, jType: $$[$0-3], id: $$[$0-2], exp: $$[$0]} 
break;
case 40:
 this.$ = {type: TYPE_OP.DECLAR, jType: $$[$0-1], id: $$[$0], exp: null} 
break;
case 41:
 this.$ = {type: TYPE_OP.ASSIGN, id:$$[$0-2], exp: $$[$0]} 
break;
case 42:
 this.$ = $$[$0] 
break;
case 43: case 45:
 this.$ = $$[$0-2] 
break;
case 44:
 this.$ = TYPE_VAL.VOID 
break;
case 46:
 this.$ = TYPE_VAL.INTEGER 
break;
case 49: case 52:
 this.$ = null; 
break;
case 53:
 this.$ = {type: TYPE_OP.CONTINUE }; 
break;
case 54:
 this.$ = {type: TYPE_OP.BREAK }; 
break;
case 55:
 this.$ = {type: TYPE_OP.RETURN, exp: null }; 
break;
case 56:
 this.$ = {type: TYPE_OP.RETURN, exp: $$[$0-1] }; 
break;
case 57:
 this.$ = {type: TYPE_OP.IF, cond: $$[$0-4], ifTrue: $$[$0-1], ifFalse: null }; 
break;
case 58:
 this.$ = {type: TYPE_OP.IF, cond: $$[$0-5], ifTrue: $$[$0-2], ifFalse: $$[$0] }; 
break;
case 60:
 this.$ = {type: TYPE_OP.IF, cond: null, ifTrue: $$[$0-1], ifFalse: null }; 
break;
case 63:
 this.$ = {type: TYPE_OP.CASE, cond: $$[$0-2], ifTrue: $$[$0] }; 
break;
case 64:
 this.$ = {type: TYPE_OP.CASE, cond: null, ifTrue: $$[$0] }; 
break;
case 65:
 this.$ = {type:TYPE_OP.CALL, call: $$[$0-3], params: $$[$0-1] } 
break;
case 66:
 this.$ = {type:TYPE_OP.CALL_JS, call: $$[$0-3], params: $$[$0-1] } 
break;
case 67:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2] 
break;
case 72:
 this.$ = {type: TYPE_OP.ACCESS, base: $$[$0-3], index: $$[$0-1]} 
break;
case 73:
 this.$ = { type: TYPE_OP.ID, val:$$[$0] }; 
break;
case 77:
 this.$ = AST_API.newVal(TYPE_VAL.ARRAY, $$[$0-2]); 
break;
case 78:
 this.$ = {type: TYPE_OP.TERNARY, cond: $$[$0-4], ifTrue: $$[$0-2], ifFalse: $$[$0] }; 
break;
case 79:
 this.$ = $$[$0-1]; 
break;
case 82:
 this.$ = {type: TYPE_OP.DOT, base: $$[$0-2], next: $$[$0]} 
break;
case 83:
 this.$ = { type: TYPE_OP.CAST, endType: $$[$0-2], exp: $$[$0] } 
break;
case 84: case 85:
 this.$ = { type: TYPE_OP.STRC, jType: $$[$0-3], exp: $$[$0-1]} 
break;
case 86:
 this.$ = { type: TYPE_OP.STRC, jType: $$[$0-2], exp: 1} 
break;
case 87:
 this.$ = {type: TYPE_OP.DOLLAR, exp: $$[$0]} 
break;
case 88:
 this.$ = {type: TYPE_OP.PLUSPLUS, op1: $$[$0-1]}; 
break;
case 89:
 this.$ = {type: TYPE_OP.MINUSMINUS, op1: $$[$0-1]}; 
break;
case 90:
 this.$ = {type: TYPE_OP.UMINUS, op1: $$[$0]}; 
break;
case 91:
 this.$ = {type: TYPE_OP.PLUS, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0]}; 
break;
case 92:
 this.$ = {type: TYPE_OP.EQUALEQUAL, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0]}; 
break;
case 93:
 this.$ = {type: TYPE_OP.NOTEQUAL, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0]}; 
break;
case 94:
 this.$ = {type: TYPE_OP.LESS, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0]}; 
break;
case 95:
 this.$ = {type: TYPE_OP.LESSEQUAL, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0]}; 
break;
case 96:
 this.$ = {type: TYPE_OP.GREATER, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0]}; 
break;
case 97:
 this.$ = {type: TYPE_OP.GREATEREQUAL, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0]}; 
break;
case 98:
 this.$ = {type: TYPE_OP.AND, op1: $$[$0-2], op2: $$[$0]}; 
break;
case 99:
 this.$ = {type: TYPE_OP.OR, op1: $$[$0-2], op2: $$[$0]}; 
break;
case 100:
 this.$ = {type: TYPE_OP.XOR, op1: $$[$0-2], op2: $$[$0]}; 
break;
case 101:
 this.$ = {type: TYPE_OP.NOT, op1: $$[$0]}; 
break;
case 102:
 this.$ = AST_API.newVal(TYPE_VAL.INTEGER, Number($$[$0])); 
break;
case 103:
 this.$ = AST_API.newVal(TYPE_VAL.DOUBLE, Number($$[$0])); 
break;
case 104:
 this.$ = AST_API.newVal(TYPE_VAL.BOOLEAN, $$[$0].toLowerCase() == "true" ? 1 : 0 ); 
break;
case 105:
 this.$ = AST_API.newVal(TYPE_VAL.CHAR, $$[$0].charCodeAt(0)); 
break;
case 106:
 this.$ = AST_API.newVal(TYPE_VAL.STRING, $$[$0]); 
break;
case 107:
 this.$ = AST_API.newVal(TYPE_VAL.NULL, -1); 
break;
}
},
table: [{3:1,4:2,6:3,8:$V0,10:5,11:6,12:7,13:$V1,14:$V2,21:8,28:$V3,45:$V4,47:$V5,48:$V6,49:14,50:$V7,51:$V8},{1:[3]},{5:[1,18],6:19,8:$V0,10:5,11:6,12:7,13:$V1,14:$V2,21:8,28:$V3,45:$V4,47:$V5,48:$V6,49:14,50:$V7,51:$V8},o($V9,[2,3],{7:[1,20]}),{9:21,20:[1,22]},o($Va,[2,7]),o($Va,[2,8]),o($Va,[2,9]),{14:[1,23]},{14:$V2,21:24,49:14,50:$V7,51:$V8},{14:[1,25]},{14:[1,26]},{14:[1,27]},{14:[1,28]},{14:[2,42],16:[1,29]},{14:[2,44]},{16:[1,30]},o([14,16,24],[2,46]),{1:[2,1]},o($V9,[2,2],{7:[1,31]}),o($V9,[2,5]),o($Va,[2,6],{19:[1,32]}),o($Vb,[2,14]),o($Va,$Vc,{22:[1,33],44:$Vd}),{14:[1,35]},{46:[1,36]},{46:[1,37]},{46:[1,38]},{15:[1,39]},{18:[1,40]},{18:[1,41]},o($V9,[2,4]),{20:[1,42]},o($Ve,$Vf,{49:14,23:43,11:44,21:45,14:$V2,45:$V4,47:$V5,48:$V6,50:$V7,51:$V8}),{14:$Vg,22:$Vh,25:$Vi,34:46,63:49,66:53,67:48,68:50,70:54,72:$Vj,73:$Vk,76:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{22:[1,64]},{14:$Vg,22:$Vh,25:$Vi,34:65,63:49,66:53,67:48,68:50,70:54,72:$Vj,73:$Vk,76:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{14:$Vg,22:$Vh,25:$Vi,34:66,63:49,66:53,67:48,68:50,70:54,72:$Vj,73:$Vk,76:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{14:$Vg,22:$Vh,25:$Vi,34:67,63:49,66:53,67:48,68:50,70:54,72:$Vj,73:$Vk,76:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{16:[1,68]},{14:[2,43]},{14:[2,45]},o($Vb,[2,13]),{19:$Vs,24:[1,69]},o($Ve,[2,18]),{14:[1,71]},o($Vt,[2,36],{16:$Vu,69:$Vv,71:$Vw,77:$Vx}),o($Vy,$Vz,{74:$VA,75:$VB}),o($Vy,[2,74]),o($Vy,[2,75]),o($Vy,[2,76]),o($VC,$VD,{67:48,63:49,68:50,66:53,70:54,64:79,34:80,14:$Vg,22:$Vh,25:$Vi,72:$Vj,73:$Vk,76:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr}),{14:$Vg,22:$Vh,25:$Vi,34:81,49:82,51:$V8,63:49,66:53,67:48,68:50,70:54,72:$Vj,73:$Vk,76:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},o($Vy,[2,80]),o($Vy,[2,81]),{14:[1,83],49:84,51:$V8},{14:$Vg,22:$Vh,25:$Vi,34:85,63:49,66:53,67:48,68:50,70:54,72:$Vj,73:$Vk,76:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},o($Vy,[2,102]),o($Vy,[2,103]),o($Vy,[2,104]),o($Vy,[2,105]),o($Vy,[2,106]),o($Vy,[2,107]),{14:$Vg,22:$Vh,25:$Vi,34:86,63:49,66:53,67:48,68:50,70:54,72:$Vj,73:$Vk,76:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},o($Ve,$Vf,{49:14,11:44,21:45,23:87,14:$V2,45:$V4,47:$V5,48:$V6,50:$V7,51:$V8}),o($Vt,[2,37],{16:$Vu,69:$Vv,71:$Vw,77:$Vx}),o($Vt,[2,38],{16:$Vu,69:$Vv,71:$Vw,77:$Vx}),o($Vt,[2,39],{16:$Vu,69:$Vv,71:$Vw,77:$Vx}),{11:89,14:$V2,17:88,21:45,45:$V4,47:$V5,48:$V6,49:14,50:$V7,51:$V8},{25:[1,90]},{11:91,14:$V2,21:45,45:$V4,47:$V5,48:$V6,49:14,50:$V7,51:$V8},o([7,13,14,18,19,22,24,25,27,31,33,35,36,39,41,42,45,47,48,50,51,56,60,62,72,73,76,89,90,91,92,93,94],$Vc,{44:$Vd}),{14:$Vg,22:$Vh,25:$Vi,34:92,63:49,66:53,67:48,68:50,70:54,72:$Vj,73:$Vk,76:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{14:$Vg,22:$Vh,25:$Vi,34:93,63:49,66:53,67:48,68:50,70:54,72:$Vj,73:$Vk,76:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},o($Ve,$VD,{67:48,63:49,68:50,66:53,70:54,64:94,65:95,34:96,30:97,14:$Vg,22:$Vh,25:$Vi,72:$Vj,73:$Vk,76:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr}),{14:$Vg,22:$Vh,25:$Vi,34:98,63:49,66:53,67:48,68:50,70:54,72:$Vj,73:$Vk,76:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{14:$Vg,22:$Vh,25:$Vi,34:99,63:49,66:53,67:48,68:50,70:54,72:$Vj,73:$Vk,76:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},o($Vy,[2,88]),o($Vy,[2,89]),{19:$VE,27:[1,100]},o($VC,$VF,{16:$Vu,22:$VG,69:$Vv,71:$Vw,77:$Vx}),{16:$Vu,22:$VG,24:[1,102],69:$Vv,71:$Vw,77:$Vx},{24:[1,103]},{16:[1,104],22:[1,105]},{16:[1,106]},o($VH,[2,87],{16:$Vu,22:$VG,71:$Vw}),o($VH,[2,90],{16:$Vu,22:$VG,71:$Vw}),{19:$Vs,24:[1,107]},{18:[1,108],19:[1,109]},o($VI,[2,12]),o($VJ,$VK,{26:110}),o($Ve,[2,17]),{16:$Vu,22:$VG,61:[1,111],69:$Vv,71:$Vw,77:$Vx},o($Vy,[2,82]),{19:$VE,24:[1,112]},{19:[1,114],24:[1,113]},o($Ve,$VF,{16:$Vu,22:$VG,44:$VL,69:$Vv,71:$Vw,77:$Vx}),o($Ve,[2,68]),o($VH,[2,91],{16:$Vu,22:$VG,71:$Vw}),{16:$Vu,18:[1,116],22:$VG,69:$Vv,71:$Vw,77:$Vx},o($Vy,[2,77]),{14:$Vg,22:$Vh,25:$Vi,34:117,63:49,66:53,67:48,68:50,70:54,72:$Vj,73:$Vk,76:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},o($Vy,[2,79]),{14:$Vg,22:$Vh,25:$Vi,34:118,63:49,66:53,67:48,68:50,70:54,72:$Vj,73:$Vk,76:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{14:$Vg,22:$Vh,25:$Vi,34:119,63:49,66:53,67:48,68:50,70:54,72:$Vj,73:$Vk,76:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{24:[1,120]},{14:$Vg,22:$Vh,25:$Vi,34:121,63:49,66:53,67:48,68:50,70:54,72:$Vj,73:$Vk,76:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{25:[1,122]},o([5,7,8,13,14,22,25,27,28,31,33,35,36,39,41,42,45,47,48,50,51,56,60,62,72,73,76,89,90,91,92,93,94],[2,10]),{11:123,14:$V2,21:45,45:$V4,47:$V5,48:$V6,49:14,50:$V7,51:$V8},{11:126,12:129,13:$V1,14:$VM,21:45,22:$Vh,25:$Vi,27:[1,124],29:125,30:127,31:$VN,32:130,33:$VO,34:137,35:$VP,36:$VQ,39:$VR,41:$VS,42:$VT,45:$V4,47:$V5,48:$V6,49:14,50:$V7,51:$V8,56:$VU,63:49,66:53,67:48,68:50,70:54,72:$Vj,73:$Vk,76:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{14:$Vg,22:$Vh,25:$Vi,34:140,63:49,66:53,67:48,68:50,70:54,72:$Vj,73:$Vk,76:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},o($Vy,[2,65]),o($Vy,[2,66]),{14:$Vg,22:$Vh,25:$Vi,30:141,34:142,63:49,66:53,67:48,68:50,70:54,72:$Vj,73:$Vk,76:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{14:$Vg,22:$Vh,25:$Vi,34:143,63:49,66:53,67:48,68:50,70:54,72:$Vj,73:$Vk,76:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},o($Vy,[2,72]),o([19,24,27],[2,69],{16:$Vu,22:$VG,69:$Vv,71:$Vw,77:$Vx}),o([5,7,8,13,14,16,18,19,22,24,25,27,28,31,33,35,36,39,41,42,44,45,47,48,50,51,56,60,61,62,69,72,73,76,77,89,90,91,92,93,94],[2,83],{71:$Vw}),{16:$Vu,18:[1,144],22:$VG,69:$Vv,71:$Vw,77:$Vx},o($Vy,[2,86]),{16:$Vu,18:[1,145],22:$VG,69:$Vv,71:$Vw,77:$Vx},o($VJ,$VK,{26:146}),o($VI,[2,11]),o($Va,[2,15]),o($VV,[2,20],{7:[1,147]}),o($VW,[2,23]),o($VW,[2,24]),o($VW,[2,25]),o($VW,[2,26]),o($VW,[2,27]),{22:[1,148]},{25:[1,149]},{22:[1,150]},{22:[1,151]},{14:$Vg,22:$Vh,25:$Vi,34:152,63:49,66:53,67:48,68:50,70:54,72:$Vj,73:$Vk,76:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{25:[1,153]},{7:[1,154],16:$Vu,22:$VG,44:$VL,69:$Vv,71:$Vw,77:$Vx},{22:[1,155]},o([7,16,22,44,69,71,77],$Vz,{74:$VA,75:$VB}),o([5,7,8,13,14,18,19,24,25,27,28,31,33,35,36,39,41,42,44,45,47,48,50,51,56,60,61,62,72,73,76,89,90,91,92,93,94],[2,78],{16:$Vu,22:$VG,69:$Vv,71:$Vw,77:$Vx}),o($Ve,[2,67]),{16:$Vu,22:$VG,44:$VL,69:$Vv,71:$Vw,77:$Vx},o([7,13,14,19,24,25,27,31,33,35,36,39,41,42,45,47,48,50,51,56,60,62,72,73,76,89,90,91,92,93,94],[2,41],{16:$Vu,22:$VG,69:$Vv,71:$Vw,77:$Vx}),o($Vy,[2,84]),o($Vy,[2,85]),{11:126,12:129,13:$V1,14:$VM,21:45,22:$Vh,25:$Vi,27:[1,156],29:125,30:127,31:$VN,32:130,33:$VO,34:137,35:$VP,36:$VQ,39:$VR,41:$VS,42:$VT,45:$V4,47:$V5,48:$V6,49:14,50:$V7,51:$V8,56:$VU,63:49,66:53,67:48,68:50,70:54,72:$Vj,73:$Vk,76:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},o($VV,[2,21]),{14:$Vg,22:$Vh,25:$Vi,34:157,63:49,66:53,67:48,68:50,70:54,72:$Vj,73:$Vk,76:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},o($VJ,$VK,{26:158}),{7:[2,49],11:160,14:$VM,21:45,22:$Vh,25:$Vi,30:161,34:142,37:159,45:$V4,47:$V5,48:$V6,49:14,50:$V7,51:$V8,63:49,66:53,67:48,68:50,70:54,72:$Vj,73:$Vk,76:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{14:$Vg,22:$Vh,25:$Vi,34:162,63:49,66:53,67:48,68:50,70:54,72:$Vj,73:$Vk,76:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},o([7,13,14,25,27,31,33,35,36,39,41,42,45,47,48,50,51,56,60,62,72,73,76,89,90,91,92,93,94],[2,33],{16:$Vu,22:$VG,69:$Vv,71:$Vw,77:$Vx}),o($VJ,$VK,{26:163}),o($VW,[2,35]),{14:$Vg,22:$Vh,25:$Vi,34:164,63:49,66:53,67:48,68:50,70:54,72:$Vj,73:$Vk,76:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},o($Va,[2,16]),{16:$Vu,22:$VG,24:[1,165],69:$Vv,71:$Vw,77:$Vx},{11:126,12:129,13:$V1,14:$VM,21:45,22:$Vh,25:$Vi,27:[1,166],29:125,30:127,31:$VN,32:130,33:$VO,34:137,35:$VP,36:$VQ,39:$VR,41:$VS,42:$VT,45:$V4,47:$V5,48:$V6,49:14,50:$V7,51:$V8,56:$VU,63:49,66:53,67:48,68:50,70:54,72:$Vj,73:$Vk,76:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{7:[1,167]},{7:[2,47]},{7:[2,48]},{16:$Vu,22:$VG,24:[1,168],69:$Vv,71:$Vw,77:$Vx},{11:126,12:129,13:$V1,14:$VM,21:45,22:$Vh,25:$Vi,27:[1,169],29:125,30:127,31:$VN,32:130,33:$VO,34:137,35:$VP,36:$VQ,39:$VR,41:$VS,42:$VT,45:$V4,47:$V5,48:$V6,49:14,50:$V7,51:$V8,56:$VU,63:49,66:53,67:48,68:50,70:54,72:$Vj,73:$Vk,76:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{16:$Vu,22:$VG,24:[1,170],69:$Vv,71:$Vw,77:$Vx},{25:[1,171]},{33:[1,172]},{7:[1,174],14:$Vg,22:$Vh,25:$Vi,34:173,63:49,66:53,67:48,68:50,70:54,72:$Vj,73:$Vk,76:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{25:[1,175]},{43:[1,176]},{25:[1,177]},o($VJ,$VK,{26:178}),{22:[1,179]},{7:[1,180],16:$Vu,22:$VG,69:$Vv,71:$Vw,77:$Vx},{14:$Vg,22:$Vh,24:$VX,25:$Vi,30:182,34:183,38:181,63:49,66:53,67:48,68:50,70:54,72:$Vj,73:$Vk,76:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{40:184,59:185,60:$VY,62:$VZ},{22:[1,188]},o($VJ,$VK,{26:189}),{11:126,12:129,13:$V1,14:$VM,21:45,22:$Vh,25:$Vi,27:[1,190],29:125,30:127,31:$VN,32:130,33:$VO,34:137,35:$VP,36:$VQ,39:$VR,41:$VS,42:$VT,45:$V4,47:$V5,48:$V6,49:14,50:$V7,51:$V8,56:$VU,63:49,66:53,67:48,68:50,70:54,72:$Vj,73:$Vk,76:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{14:$Vg,22:$Vh,25:$Vi,34:191,63:49,66:53,67:48,68:50,70:54,72:$Vj,73:$Vk,76:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{14:$Vg,22:$Vh,24:$VX,25:$Vi,30:182,34:183,38:192,63:49,66:53,67:48,68:50,70:54,72:$Vj,73:$Vk,76:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{24:[1,193]},{24:[2,50]},{16:$Vu,22:$VG,24:[2,51],44:$VL,69:$Vv,71:$Vw,77:$Vx},{27:[1,194],59:195,60:$VY,62:$VZ},o($V_,[2,62]),{14:$Vg,22:$Vh,25:$Vi,34:196,63:49,66:53,67:48,68:50,70:54,72:$Vj,73:$Vk,76:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},{61:[1,197]},{14:[1,198]},{11:126,12:129,13:$V1,14:$VM,21:45,22:$Vh,25:$Vi,27:[1,199],29:125,30:127,31:$VN,32:130,33:$VO,34:137,35:$VP,36:$VQ,39:$VR,41:$VS,42:$VT,45:$V4,47:$V5,48:$V6,49:14,50:$V7,51:$V8,56:$VU,63:49,66:53,67:48,68:50,70:54,72:$Vj,73:$Vk,76:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},o($VW,[2,28]),{16:$Vu,22:$VG,24:[1,200],69:$Vv,71:$Vw,77:$Vx},{24:[1,201]},{25:[1,202]},o($VW,[2,32]),o($V_,[2,61]),{16:$Vu,22:$VG,61:[1,203],69:$Vv,71:$Vw,77:$Vx},o($VV,$VK,{26:204}),{14:[1,205]},o($VW,[2,57],{57:206,58:[1,207]}),o($VW,[2,29]),{25:[1,208]},o($VJ,$VK,{26:209}),o($VV,$VK,{26:210}),o($V_,[2,64],{49:14,21:45,67:48,63:49,68:50,66:53,70:54,29:125,11:126,30:127,12:129,32:130,34:137,13:$V1,14:$VM,22:$Vh,25:$Vi,31:$VN,33:$VO,35:$VP,36:$VQ,39:$VR,41:$VS,42:$VT,45:$V4,47:$V5,48:$V6,50:$V7,51:$V8,56:$VU,72:$Vj,73:$Vk,76:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr}),{24:[1,211]},o($VW,[2,58]),{25:[1,213],32:212,56:$VU},o($VJ,$VK,{26:214}),{11:126,12:129,13:$V1,14:$VM,21:45,22:$Vh,25:$Vi,27:[1,215],29:125,30:127,31:$VN,32:130,33:$VO,34:137,35:$VP,36:$VQ,39:$VR,41:$VS,42:$VT,45:$V4,47:$V5,48:$V6,49:14,50:$V7,51:$V8,56:$VU,63:49,66:53,67:48,68:50,70:54,72:$Vj,73:$Vk,76:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},o($V_,[2,63],{49:14,21:45,67:48,63:49,68:50,66:53,70:54,29:125,11:126,30:127,12:129,32:130,34:137,13:$V1,14:$VM,22:$Vh,25:$Vi,31:$VN,33:$VO,35:$VP,36:$VQ,39:$VR,41:$VS,42:$VT,45:$V4,47:$V5,48:$V6,50:$V7,51:$V8,56:$VU,72:$Vj,73:$Vk,76:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr}),{25:[1,216]},o($VW,[2,59]),o($VJ,$VK,{26:217}),{11:126,12:129,13:$V1,14:$VM,21:45,22:$Vh,25:$Vi,27:[1,218],29:125,30:127,31:$VN,32:130,33:$VO,34:137,35:$VP,36:$VQ,39:$VR,41:$VS,42:$VT,45:$V4,47:$V5,48:$V6,49:14,50:$V7,51:$V8,56:$VU,63:49,66:53,67:48,68:50,70:54,72:$Vj,73:$Vk,76:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},o($VW,[2,31]),o($VJ,$VK,{26:219}),{11:126,12:129,13:$V1,14:$VM,21:45,22:$Vh,25:$Vi,27:[1,220],29:125,30:127,31:$VN,32:130,33:$VO,34:137,35:$VP,36:$VQ,39:$VR,41:$VS,42:$VT,45:$V4,47:$V5,48:$V6,49:14,50:$V7,51:$V8,56:$VU,63:49,66:53,67:48,68:50,70:54,72:$Vj,73:$Vk,76:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},o($VW,[2,30]),{11:126,12:129,13:$V1,14:$VM,21:45,22:$Vh,25:$Vi,27:[1,221],29:125,30:127,31:$VN,32:130,33:$VO,34:137,35:$VP,36:$VQ,39:$VR,41:$VS,42:$VT,45:$V4,47:$V5,48:$V6,49:14,50:$V7,51:$V8,56:$VU,63:49,66:53,67:48,68:50,70:54,72:$Vj,73:$Vk,76:$Vl,89:$Vm,90:$Vn,91:$Vo,92:$Vp,93:$Vq,94:$Vr},o($VW,[2,60]),o($VW,[2,34])],
defaultActions: {15:[2,44],18:[2,1],40:[2,43],41:[2,45],160:[2,47],161:[2,48],182:[2,50]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
var strBuffer = "";
	const TYPE_OP       	= require('./instructions').TYPE_OP;
	const TYPE_VAL      	= require('./instructions').TYPE_VAL;
	const AST_API       	= require('./instructions').AST_API;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:/* IGNORE */
break;
case 2:/* IGNORE */
break;
case 3:return 71;
break;
case 4:return 7;
break;
case 5:return "COMMA";
break;
case 6:return "COLONEQUAL"
break;
case 7:return 69;
break;
case 8:return "COLON";
break;
case 9:return 74;
break;
case 10:return 75;
break;
case 11:return 77;
break;
case 12:return 76;
break;
case 13:return 'TIMES';
break;
case 14:return 'DIVIDE';
break;
case 15:return 'MODULE';
break;
case 16:return "POW"
break;
case 17:return 82;
break;
case 18:return "LESS";
break;
case 19:return 84;
break;
case 20:return 83;
break;
case 21:return 'EQUALEQUALEQUAL';
break;
case 22:return 79;
break;
case 23:return 80;
break;
case 24:return "EQUAL";
break;
case 25:return 16;
break;
case 26:return 18;
break;
case 27:return 22;
break;
case 28:return 24;
break;
case 29:return 25;
break;
case 30:return 27;
break;
case 31:return 85;
break;
case 32:return 86;
break;
case 33:return 87;
break;
case 34:return 88;
break;
case 35:return 73;
break;
case 36:return 94;
break;
case 37:return 51;
break;
case 38:return 'R_DOUBLE';
break;
case 39:return 'R_CHAR';
break;
case 40:return 'R_BOOLEAN';
break;
case 41:return 8;
break;
case 42:return 45;
break;
case 43:return "R_CONST";
break;
case 44:return "R_GLOBAL";
break;
case 45:return 56;
break;
case 46:return 58;
break;
case 47:return 39;
break;
case 48:return 60;
break;
case 49:return 53;
break;
case 50:return 54;
break;
case 51:return 55;
break;
case 52:return 36;
break;
case 53:return 33;
break;
case 54:return 35;
break;
case 55:return 50;
break;
case 56:return "R_DEFINE";
break;
case 57:return "R_AS";
break;
case 58:return "R_STRC";
break;
case 59:return "R_TRY";
break;
case 60:return "R_CATCH";
break;
case 61:return "R_THROW";
break;
case 62:return 91;
break;
case 63:return 91;
break;
case 64:return 90;
break;
case 65:return 89;
break;
case 66: strBuffer = ""; this.begin('STRING'); 
break;
case 67: this.begin('CHAR'); 
break;
case 68:return 20;
break;
case 69:return 14;
break;
case 70: console.log("STRING: " + strBuffer); this.popState(); yy_.yytext = strBuffer; return 93; 
break;
case 71: strBuffer += "\""; 
break;
case 72: strBuffer += "\\"; 
break;
case 73: strBuffer += "\n"; 
break;
case 74: strBuffer += "\r"; 
break;
case 75: strBuffer += "\t"; 
break;
case 76: strBuffer += yy_.yytext; 
break;
case 77: console.log("unclosed String"); 
break;
case 78: yy_.yytext = "'"; this.popState(); return 92; 
break;
case 79: yy_.yytext = "\\"; this.popState(); return 92; 
break;
case 80: yy_.yytext = "\n"; this.popState(); return 92; 
break;
case 81: yy_.yytext = "\t"; this.popState(); return 92; 
break;
case 82: yy_.yytext = "\t"; this.popState(); return 92; 
break;
case 83: yy_.yytext = "\0"; this.popState(); return 92; 
break;
case 84: yy_.yytext = yy_.yytext.slice(0, -1);  this.popState(); return 92; 
break;
case 85: yy_.yytext = "\0"; this.popState(); return 92; 
break;
case 86: console.log("invalid Char... skipping"); this.popState(); 
break;
case 87:return 5;
break;
case 88: console.error('Error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\.)/i,/^(?:;)/i,/^(?:,)/i,/^(?::=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\^\^)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:===)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\^)/i,/^(?:!)/i,/^(?:\$)/i,/^(?:null\b)/i,/^(?:integer\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:import\b)/i,/^(?:var\b)/i,/^(?:const\b)/i,/^(?:global\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:continue\b)/i,/^(?:break\b)/i,/^(?:return\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:void\b)/i,/^(?:define\b)/i,/^(?:as\b)/i,/^(?:strc\b)/i,/^(?:try\b)/i,/^(?:catch\b)/i,/^(?:throw\b)/i,/^(?:false\b)/i,/^(?:true\b)/i,/^(?:[0-9]+(\.[0-9]+)?)/i,/^(?:[0-9]+)/i,/^(?:")/i,/^(?:')/i,/^(?:([a-zA-Z])[a-zA-ZñÑ0-9_]*\.js\b)/i,/^(?:([a-zA-Z])[a-zA-ZñÑ0-9_]*)/i,/^(?:")/i,/^(?:\\")/i,/^(?:\\\\)/i,/^(?:\\n)/i,/^(?:\\r)/i,/^(?:\\t)/i,/^(?:.)/i,/^(?:$)/i,/^(?:\\'')/i,/^(?:\\\\')/i,/^(?:\\n')/i,/^(?:\\r')/i,/^(?:\\t')/i,/^(?:\\0')/i,/^(?:[^']')/i,/^(?:')/i,/^(?:.)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"CHAR":{"rules":[78,79,80,81,82,83,84,85,86],"inclusive":false},"STRING":{"rules":[70,71,72,73,74,75,76,77],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,87,88],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}