/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,14],$V2=[1,10],$V3=[1,9],$V4=[1,11],$V5=[1,12],$V6=[1,13],$V7=[1,16],$V8=[1,17],$V9=[1,18],$Va=[1,19],$Vb=[1,20],$Vc=[5,8,13,14,28,45,47,48,50,51,52,53,54],$Vd=[5,7,8,13,14,28,45,47,48,50,51,52,53,54],$Ve=[1,30],$Vf=[14,16,24],$Vg=[5,7,8,13,14,19,28,45,47,48,50,51,52,53,54],$Vh=[2,43],$Vi=[1,39],$Vj=[2,44],$Vk=[1,43],$Vl=[19,24],$Vm=[2,21],$Vn=[1,54],$Vo=[1,56],$Vp=[1,62],$Vq=[1,61],$Vr=[1,65],$Vs=[1,66],$Vt=[1,73],$Vu=[1,74],$Vv=[1,67],$Vw=[1,68],$Vx=[1,69],$Vy=[1,70],$Vz=[1,71],$VA=[1,72],$VB=[1,84],$VC=[1,86],$VD=[5,7,8,13,14,18,19,22,24,25,27,28,31,33,35,36,39,41,42,45,47,48,50,51,52,53,54,59,63,65,76,77,80,96,97,98,99,100,101,102],$VE=[1,106],$VF=[1,87],$VG=[1,88],$VH=[1,90],$VI=[1,92],$VJ=[1,93],$VK=[1,94],$VL=[1,95],$VM=[1,96],$VN=[1,97],$VO=[1,98],$VP=[1,99],$VQ=[1,100],$VR=[1,101],$VS=[1,102],$VT=[1,103],$VU=[1,104],$VV=[1,105],$VW=[5,7,8,13,14,16,18,19,22,24,25,27,28,31,33,35,36,39,41,42,44,45,47,48,50,51,52,53,54,59,63,64,65,73,75,76,77,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102],$VX=[2,80],$VY=[1,107],$VZ=[1,108],$V_=[19,27],$V$=[2,78],$V01=[7,13,14,18,19,22,24,25,27,31,33,35,36,39,41,42,45,47,48,50,51,52,53,54,59,63,65,76,77,80,96,97,98,99,100,101,102],$V11=[1,149],$V21=[2,77],$V31=[1,89],$V41=[1,91],$V51=[5,7,8,13,14,18,19,24,25,27,28,31,33,35,36,39,41,42,44,45,47,48,50,51,52,53,54,59,63,64,65,73,76,77,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102],$V61=[18,19],$V71=[13,14,22,25,27,31,33,35,36,39,41,42,45,47,48,50,51,52,53,54,59,76,77,80,96,97,98,99,100,101,102],$V81=[2,24],$V91=[1,165],$Va1=[5,7,8,13,14,18,19,24,25,27,28,31,33,35,36,39,41,42,44,45,47,48,50,51,52,53,54,59,63,64,65,73,76,77,80,81,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102],$Vb1=[5,7,8,13,14,18,19,24,25,27,28,31,33,35,36,39,41,42,44,45,47,48,50,51,52,53,54,59,63,64,65,73,76,77,80,81,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102],$Vc1=[5,7,8,13,14,18,19,24,25,27,28,31,33,35,36,39,41,42,44,45,47,48,50,51,52,53,54,59,63,64,65,73,76,77,86,87,88,93,94,95,96,97,98,99,100,101,102],$Vd1=[5,7,8,13,14,18,19,24,25,27,28,31,33,35,36,39,41,42,44,45,47,48,50,51,52,53,54,59,63,64,65,73,76,77,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102],$Ve1=[1,190],$Vf1=[1,180],$Vg1=[1,183],$Vh1=[1,184],$Vi1=[1,185],$Vj1=[1,186],$Vk1=[1,187],$Vl1=[1,188],$Vm1=[1,191],$Vn1=[13,14,22,25,27,31,33,35,36,39,41,42,45,47,48,50,51,52,53,54,59,63,65,76,77,80,96,97,98,99,100,101,102],$Vo1=[7,13,14,22,25,27,31,33,35,36,39,41,42,45,47,48,50,51,52,53,54,59,63,65,76,77,80,96,97,98,99,100,101,102],$Vp1=[2,59],$Vq1=[1,241],$Vr1=[1,242],$Vs1=[27,63,65];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"l_global":4,"EOF":5,"global":6,"SEMICOLON":7,"R_IMPORT":8,"import_list":9,"funcDeclar":10,"varDeclar":11,"defineStruct":12,"R_DEFINE":13,"ID":14,"R_AS":15,"BRACKET_L":16,"l_declar":17,"BRACKET_R":18,"COMMA":19,"FILENAME":20,"type":21,"PAR_L":22,"l_param":23,"PAR_R":24,"BRACE_L":25,"l_statement":26,"BRACE_R":27,"R_PUBLIC":28,"statement":29,"varAssign":30,"jump_control":31,"if":32,"R_WHILE":33,"exp":34,"R_DO":35,"R_FOR":36,"for_init":37,"for_update":38,"R_SWITCH":39,"l_case":40,"R_THROW":41,"R_TRY":42,"R_CATCH":43,"EQUAL":44,"R_VAR":45,"COLONEQUAL":46,"R_CONST":47,"R_GLOBAL":48,"primType":49,"R_VOID":50,"R_INTEGER":51,"R_DOUBLE":52,"R_CHAR":53,"R_BOOLEAN":54,"jump":55,"R_CONTINUE":56,"R_BREAK":57,"R_RETURN":58,"R_IF":59,"if_else":60,"R_ELSE":61,"case":62,"R_CASE":63,"COLON":64,"R_DEFAULT":65,"call":66,"l_exp":67,"l_assign":68,"access":69,"atomic":70,"exp_arithmetic":71,"exp_logic":72,"TERNARY":73,"update":74,"DOT":75,"R_STRC":76,"DOLLAR":77,"PLUSPLUS":78,"MINUSMINUS":79,"MINUS":80,"PLUS":81,"TIMES":82,"DIVIDE":83,"MODULE":84,"POW":85,"EQUALEQUALEQUAL":86,"EQUALEQUAL":87,"NOTEQUAL":88,"LESS":89,"LESSEQUAL":90,"GREATER":91,"GREATEREQUAL":92,"AND":93,"OR":94,"XOR":95,"NOT":96,"LITERAL_INT":97,"LITERAL_DOUBLE":98,"LITERAL_BOOLEAN":99,"LITERAL_CHAR":100,"LITERAL_STRING":101,"R_NULL":102,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"SEMICOLON",8:"R_IMPORT",13:"R_DEFINE",14:"ID",15:"R_AS",16:"BRACKET_L",18:"BRACKET_R",19:"COMMA",20:"FILENAME",22:"PAR_L",24:"PAR_R",25:"BRACE_L",27:"BRACE_R",28:"R_PUBLIC",31:"jump_control",33:"R_WHILE",35:"R_DO",36:"R_FOR",39:"R_SWITCH",41:"R_THROW",42:"R_TRY",43:"R_CATCH",44:"EQUAL",45:"R_VAR",46:"COLONEQUAL",47:"R_CONST",48:"R_GLOBAL",50:"R_VOID",51:"R_INTEGER",52:"R_DOUBLE",53:"R_CHAR",54:"R_BOOLEAN",56:"R_CONTINUE",57:"R_BREAK",58:"R_RETURN",59:"R_IF",61:"R_ELSE",63:"R_CASE",64:"COLON",65:"R_DEFAULT",73:"TERNARY",75:"DOT",76:"R_STRC",77:"DOLLAR",78:"PLUSPLUS",79:"MINUSMINUS",80:"MINUS",81:"PLUS",82:"TIMES",83:"DIVIDE",84:"MODULE",85:"POW",86:"EQUALEQUALEQUAL",87:"EQUALEQUAL",88:"NOTEQUAL",89:"LESS",90:"LESSEQUAL",91:"GREATER",92:"GREATEREQUAL",93:"AND",94:"OR",95:"XOR",96:"NOT",97:"LITERAL_INT",98:"LITERAL_DOUBLE",99:"LITERAL_BOOLEAN",100:"LITERAL_CHAR",101:"LITERAL_STRING",102:"R_NULL"},
productions_: [0,[3,2],[4,2],[4,1],[4,3],[4,2],[6,2],[6,1],[6,1],[6,1],[12,6],[17,3],[17,1],[9,3],[9,1],[10,8],[10,9],[10,8],[10,9],[23,3],[23,1],[23,0],[26,2],[26,3],[26,0],[29,1],[29,1],[29,1],[29,1],[29,1],[29,7],[29,8],[29,11],[29,10],[29,7],[29,2],[29,12],[29,2],[11,4],[11,4],[11,4],[11,4],[11,4],[11,2],[11,2],[30,3],[21,1],[21,3],[21,1],[21,3],[49,1],[49,1],[49,1],[49,1],[37,1],[37,1],[37,0],[38,1],[38,1],[38,0],[55,1],[55,1],[55,2],[55,3],[32,7],[32,8],[60,2],[60,4],[40,2],[40,1],[62,4],[62,3],[66,4],[66,4],[68,3],[68,1],[67,3],[67,1],[67,0],[69,4],[34,1],[34,1],[34,1],[34,1],[34,1],[34,3],[34,5],[34,3],[34,1],[34,1],[34,3],[34,4],[34,5],[34,5],[34,4],[34,2],[74,2],[74,2],[71,2],[71,3],[71,3],[71,3],[71,3],[71,3],[71,3],[72,3],[72,3],[72,3],[72,3],[72,3],[72,3],[72,3],[72,3],[72,3],[72,3],[72,2],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2: case 22: case 68:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 14: case 20: case 69: case 77:
 this.$ = [$$[$0]]; 
break;
case 4: case 23:
 $$[$0-2].push($$[$0-1]); this.$ = $$[$0-2]; 
break;
case 5:
 this.$ = [$$[$0-1]]; 
break;
case 6:
 this.$ = {type: TYPE_OP.IMPORT, import: $$[$0] };
break;
case 7: case 8: case 9: case 25: case 26: case 27: case 28: case 29: case 54: case 55: case 57: case 58: case 66: case 81: case 82: case 83: case 84: case 88: case 89:
 this.$ = $$[$0]; 
break;
case 10:
 this.$ = { type: TYPE_OP.DEFINE_STRC, id: $$[$0-4], l_declar: $$[$0-1]} 
break;
case 11:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]
break;
case 12: case 75:
 this.$ = [$$[$0]] 
break;
case 13: case 19: case 76:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 15: case 16: case 17: case 18:
 this.$ = {type: TYPE_OP.FUNC_DEF, returnType: $$[$0-7], name: $$[$0-6], params: $$[$0-4], block: $$[$0-1] }; 
break;
case 21: case 24: case 78:
 this.$ = []; 
break;
case 30:
 this.$ = {type: TYPE_OP.WHILE, cond: $$[$0-4], block: $$[$0-1] }; 
break;
case 31:
 this.$ = {type: TYPE_OP.DO_WHILE, block: $$[$0-5], cond: $$[$0-1] }; 
break;
case 32:
 this.$ = {type: TYPE_OP.FOR, init: $$[$0-8], cond: $$[$0-6], update: $$[$0-4], block: $$[$0-1] }; 
break;
case 33:
 this.$ = {type: TYPE_OP.FOR, init: $$[$0-7], cond: null, update: $$[$0-4], block: $$[$0-1] }; 
break;
case 34:
 this.$ = {type: TYPE_OP.SWITCH, switch: $$[$0-4], cases: $$[$0-1] }; 
break;
case 35:
 this.$ = { type: TYPE_OP.THROW, exp: $$[$0]}
break;
case 36:
 this.$ = {type: TYPE_OP.TRY, tryBlock: $$[$0-9], exceptionType: $$[$0-5], catchBlock: $$[$0-1]}; 
break;
case 37:
 this.$ = $$[$0-1] 
break;
case 38: case 39: case 40: case 41: case 42:
 this.$ = {type: TYPE_OP.DECLAR, jType: $$[$0-3], id: $$[$0-2], exp: $$[$0]} 
break;
case 43: case 44:
 this.$ = {type: TYPE_OP.DECLAR, jType: $$[$0-1], id: $$[$0], exp: null} 
break;
case 45:
 this.$ = {type: TYPE_OP.ASSIGN, id:$$[$0-2], exp: $$[$0]} 
break;
case 46:
 this.$ = $$[$0] 
break;
case 47: case 49:
 this.$ = $$[$0-2] 
break;
case 48:
 this.$ = TYPE_VAL.VOID 
break;
case 50:
 this.$ = TYPE_VAL.INTEGER 
break;
case 51:
 this.$ = TYPE_VAL.DOUBLE 
break;
case 52:
 this.$ = TYPE_VAL.CHAR 
break;
case 53:
 this.$ = TYPE_VAL.BOOLEAN 
break;
case 56: case 59:
 this.$ = null; 
break;
case 60:
 this.$ = {type: TYPE_OP.CONTINUE }; 
break;
case 61:
 this.$ = {type: TYPE_OP.BREAK }; 
break;
case 62:
 this.$ = {type: TYPE_OP.RETURN, exp: null }; 
break;
case 63:
 this.$ = {type: TYPE_OP.RETURN, exp: $$[$0-1] }; 
break;
case 64:
 this.$ = {type: TYPE_OP.IF, cond: $$[$0-4], ifTrue: $$[$0-1], ifFalse: null }; 
break;
case 65:
 this.$ = {type: TYPE_OP.IF, cond: $$[$0-5], ifTrue: $$[$0-2], ifFalse: $$[$0] }; 
break;
case 67:
 this.$ = {type: TYPE_OP.IF, cond: null, ifTrue: $$[$0-1], ifFalse: null }; 
break;
case 70:
 this.$ = {type: TYPE_OP.CASE, cond: $$[$0-2], ifTrue: $$[$0] }; 
break;
case 71:
 this.$ = {type: TYPE_OP.CASE, cond: null, ifTrue: $$[$0] }; 
break;
case 72:
 this.$ = {type:TYPE_OP.CALL, call: $$[$0-3], params: $$[$0-1] } 
break;
case 73:
 this.$ = {type:TYPE_OP.CALL_JS, call: $$[$0-3], params: $$[$0-1] } 
break;
case 74:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2] 
break;
case 79:
 this.$ = {type: TYPE_OP.ACCESS, base: $$[$0-3], index: $$[$0-1]} 
break;
case 80:
 this.$ = { type: TYPE_OP.ID, val:$$[$0] }; 
break;
case 85:
 this.$ = AST_API.newVal(TYPE_VAL.ARRAY, $$[$0-2]); 
break;
case 86:
 this.$ = {type: TYPE_OP.TERNARY, cond: $$[$0-4], ifTrue: $$[$0-2], ifFalse: $$[$0] }; 
break;
case 87:
 this.$ = $$[$0-1]; 
break;
case 90:
 this.$ = {type: TYPE_OP.DOT, base: $$[$0-2], next: $$[$0]} 
break;
case 91:
 this.$ = { type: TYPE_OP.CAST, endType: $$[$0-2], exp: $$[$0] } 
break;
case 92: case 93:
 this.$ = { type: TYPE_OP.STRC, jType: $$[$0-3], exp: $$[$0-1]} 
break;
case 94:
 this.$ = { type: TYPE_OP.STRC, jType: $$[$0-2], exp: 1} 
break;
case 95:
 this.$ = {type: TYPE_OP.DOLLAR, exp: $$[$0]} 
break;
case 96:
 this.$ = {type: TYPE_OP.PLUSPLUS, op1: $$[$0-1]}; 
break;
case 97:
 this.$ = {type: TYPE_OP.MINUSMINUS, op1: $$[$0-1]}; 
break;
case 98:
 this.$ = {type: TYPE_OP.UMINUS, op1: $$[$0]}; 
break;
case 99:
 this.$ = {type: TYPE_OP.PLUS, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0]}; 
break;
case 100:
 this.$ = {type: TYPE_OP.MINUS, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0]}; 
break;
case 101:
 this.$ = {type: TYPE_OP.TIMES, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0]}; 
break;
case 102:
 this.$ = {type: TYPE_OP.DIVIDE, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0]}; 
break;
case 103:
 this.$ = {type: TYPE_OP.MODULE, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0]}; 
break;
case 104:
 this.$ = {type: TYPE_OP.POW, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0]}; 
break;
case 105:
 this.$ = {type: TYPE_OP.EQUALEQUALEQUAL, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0]}; 
break;
case 106:
 this.$ = {type: TYPE_OP.EQUALEQUAL, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0]}; 
break;
case 107:
 this.$ = {type: TYPE_OP.NOTEQUAL, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0]}; 
break;
case 108:
 this.$ = {type: TYPE_OP.LESS, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0]}; 
break;
case 109:
 this.$ = {type: TYPE_OP.LESSEQUAL, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0]}; 
break;
case 110:
 this.$ = {type: TYPE_OP.GREATER, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0]}; 
break;
case 111:
 this.$ = {type: TYPE_OP.GREATEREQUAL, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0]}; 
break;
case 112:
 this.$ = {type: TYPE_OP.AND, op1: $$[$0-2], op2: $$[$0]}; 
break;
case 113:
 this.$ = {type: TYPE_OP.OR, op1: $$[$0-2], op2: $$[$0]}; 
break;
case 114:
 this.$ = {type: TYPE_OP.XOR, op1: $$[$0-2], op2: $$[$0]}; 
break;
case 115:
 this.$ = {type: TYPE_OP.NOT, op1: $$[$0]}; 
break;
case 116:
 this.$ = AST_API.newVal(TYPE_VAL.INTEGER, Number($$[$0])); 
break;
case 117:
 this.$ = AST_API.newVal(TYPE_VAL.DOUBLE, Number($$[$0])); 
break;
case 118:
 this.$ = AST_API.newVal(TYPE_VAL.BOOLEAN, $$[$0].toLowerCase() == "true" ? 1 : 0 ); 
break;
case 119:
 this.$ = AST_API.newVal(TYPE_VAL.CHAR, $$[$0].charCodeAt(0)); 
break;
case 120:
 this.$ = AST_API.newVal(TYPE_VAL.STRING, $$[$0]); 
break;
case 121:
 this.$ = AST_API.newVal(TYPE_VAL.NULL, -1); 
break;
}
},
table: [{3:1,4:2,6:3,8:$V0,10:5,11:6,12:7,13:$V1,14:$V2,21:8,28:$V3,45:$V4,47:$V5,48:$V6,49:15,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb},{1:[3]},{5:[1,21],6:22,8:$V0,10:5,11:6,12:7,13:$V1,14:$V2,21:8,28:$V3,45:$V4,47:$V5,48:$V6,49:15,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb},o($Vc,[2,3],{7:[1,23]}),{9:24,20:[1,25]},o($Vd,[2,7]),o($Vd,[2,8]),o($Vd,[2,9]),{14:[1,26]},{14:[1,28],21:27,49:15,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb},{14:[1,29],16:$Ve},{14:[1,31]},{14:[1,32]},{14:[1,33]},{14:[1,34]},{14:[2,46],16:[1,35]},{14:[2,48]},o($Vf,[2,50]),o($Vf,[2,51]),o($Vf,[2,52]),o($Vf,[2,53]),{1:[2,1]},o($Vc,[2,2],{7:[1,36]}),o($Vc,[2,5]),o($Vd,[2,6],{19:[1,37]}),o($Vg,[2,14]),o($Vd,$Vh,{22:[1,38],44:$Vi}),{14:[1,40]},{14:[1,41],16:$Ve},o($Vd,$Vj,{22:[1,42],44:$Vk}),{18:[1,44]},{46:[1,45]},{46:[1,46]},{46:[1,47]},{15:[1,48]},{18:[1,49]},o($Vc,[2,4]),{20:[1,50]},o($Vl,$Vm,{49:15,23:51,11:52,21:53,14:$Vn,45:$V4,47:$V5,48:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb}),{14:$Vo,22:$Vp,25:$Vq,34:55,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},{22:[1,75]},{22:[1,76]},o($Vl,$Vm,{49:15,11:52,21:53,23:77,14:$Vn,45:$V4,47:$V5,48:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb}),{14:$Vo,22:$Vp,25:$Vq,34:78,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},{14:[2,49]},{14:$Vo,22:$Vp,25:$Vq,34:79,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},{14:$Vo,22:$Vp,25:$Vq,34:80,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},{14:$Vo,22:$Vp,25:$Vq,34:81,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},{16:[1,82]},{14:[2,47]},o($Vg,[2,13]),{19:$VB,24:[1,83]},o($Vl,[2,20]),{14:[1,85]},{14:$VC,16:$Ve},o($VD,[2,38],{16:$VE,73:$VF,75:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT,94:$VU,95:$VV}),o($VW,$VX,{78:$VY,79:$VZ}),o($VW,[2,81]),o($VW,[2,82]),o($VW,[2,83]),o($VW,[2,84]),o($V_,$V$,{70:57,66:58,71:59,72:60,69:63,74:64,67:109,34:110,14:$Vo,22:$Vp,25:$Vq,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA}),{14:$Vo,22:$Vp,25:$Vq,34:111,49:112,51:$V8,52:$V9,53:$Va,54:$Vb,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},o($VW,[2,88]),o($VW,[2,89]),{14:[1,113],49:114,51:$V8,52:$V9,53:$Va,54:$Vb},{14:$Vo,22:$Vp,25:$Vq,34:115,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},o($VW,[2,116]),o($VW,[2,117]),o($VW,[2,118]),o($VW,[2,119]),o($VW,[2,120]),o($VW,[2,121]),{14:$Vo,22:$Vp,25:$Vq,34:116,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},{14:$Vo,22:$Vp,25:$Vq,34:117,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},o($Vl,$Vm,{49:15,11:52,21:53,23:118,14:$Vn,45:$V4,47:$V5,48:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb}),o($Vl,$Vm,{49:15,11:52,21:53,23:119,14:$Vn,45:$V4,47:$V5,48:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb}),{19:$VB,24:[1,120]},o($VD,[2,39],{16:$VE,73:$VF,75:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT,94:$VU,95:$VV}),o($VD,[2,40],{16:$VE,73:$VF,75:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT,94:$VU,95:$VV}),o($VD,[2,41],{16:$VE,73:$VF,75:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT,94:$VU,95:$VV}),o($VD,[2,42],{16:$VE,73:$VF,75:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT,94:$VU,95:$VV}),{11:122,14:$Vn,17:121,21:53,45:$V4,47:$V5,48:$V6,49:15,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb},{25:[1,123]},{11:124,14:$Vn,21:53,45:$V4,47:$V5,48:$V6,49:15,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb},o($V01,$Vh,{44:$Vi}),o($V01,$Vj,{44:$Vk}),{14:$Vo,22:$Vp,25:$Vq,34:125,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},{14:$Vo,22:$Vp,25:$Vq,34:126,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},o($Vl,$V$,{70:57,66:58,71:59,72:60,69:63,74:64,67:127,68:128,34:129,30:130,14:$Vo,22:$Vp,25:$Vq,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA}),{14:$Vo,22:$Vp,25:$Vq,34:131,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},{14:$Vo,22:$Vp,25:$Vq,34:132,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},{14:$Vo,22:$Vp,25:$Vq,34:133,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},{14:$Vo,22:$Vp,25:$Vq,34:134,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},{14:$Vo,22:$Vp,25:$Vq,34:135,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},{14:$Vo,22:$Vp,25:$Vq,34:136,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},{14:$Vo,22:$Vp,25:$Vq,34:137,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},{14:$Vo,22:$Vp,25:$Vq,34:138,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},{14:$Vo,22:$Vp,25:$Vq,34:139,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},{14:$Vo,22:$Vp,25:$Vq,34:140,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},{14:$Vo,22:$Vp,25:$Vq,34:141,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},{14:$Vo,22:$Vp,25:$Vq,34:142,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},{14:$Vo,22:$Vp,25:$Vq,34:143,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},{14:$Vo,22:$Vp,25:$Vq,34:144,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},{14:$Vo,22:$Vp,25:$Vq,34:145,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},{14:$Vo,22:$Vp,25:$Vq,34:146,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},{14:$Vo,22:$Vp,25:$Vq,34:147,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},o($VW,[2,96]),o($VW,[2,97]),{19:$V11,27:[1,148]},o($V_,$V21,{16:$VE,22:$V31,73:$VF,75:$VG,80:$V41,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT,94:$VU,95:$VV}),{16:$VE,22:$V31,24:[1,150],73:$VF,75:$VG,80:$V41,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT,94:$VU,95:$VV},{24:[1,151]},{16:[1,152],22:[1,153]},{16:[1,154]},o($V51,[2,95],{16:$VE,22:$V31,75:$VG}),o($V51,[2,98],{16:$VE,22:$V31,75:$VG}),o($V51,[2,115],{16:$VE,22:$V31,75:$VG}),{19:$VB,24:[1,155]},{19:$VB,24:[1,156]},{25:[1,157]},{18:[1,158],19:[1,159]},o($V61,[2,12]),o($V71,$V81,{26:160}),o($Vl,[2,19]),{16:$VE,22:$V31,64:[1,161],73:$VF,75:$VG,80:$V41,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT,94:$VU,95:$VV},o($VW,[2,90]),{19:$V11,24:[1,162]},{19:[1,164],24:[1,163]},o($Vl,$V21,{16:$VE,22:$V31,44:$V91,73:$VF,75:$VG,80:$V41,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT,94:$VU,95:$VV}),o($Vl,[2,75]),o($Va1,[2,99],{16:$VE,22:$V31,75:$VG,82:$VI,83:$VJ,84:$VK,85:$VL}),o($Va1,[2,100],{16:$VE,22:$V31,75:$VG,82:$VI,83:$VJ,84:$VK,85:$VL}),o($Vb1,[2,101],{16:$VE,22:$V31,75:$VG,85:$VL}),o($Vb1,[2,102],{16:$VE,22:$V31,75:$VG,85:$VL}),o($Vb1,[2,103],{16:$VE,22:$V31,75:$VG,85:$VL}),o($Vb1,[2,104],{16:$VE,22:$V31,75:$VG,85:$VL}),o($Vc1,[2,105],{16:$VE,22:$V31,75:$VG,80:$V41,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,89:$VP,90:$VQ,91:$VR,92:$VS}),o($Vc1,[2,106],{16:$VE,22:$V31,75:$VG,80:$V41,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,89:$VP,90:$VQ,91:$VR,92:$VS}),o($Vc1,[2,107],{16:$VE,22:$V31,75:$VG,80:$V41,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,89:$VP,90:$VQ,91:$VR,92:$VS}),o($Vd1,[2,108],{16:$VE,22:$V31,75:$VG,80:$V41,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL}),o($Vd1,[2,109],{16:$VE,22:$V31,75:$VG,80:$V41,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL}),o($Vd1,[2,110],{16:$VE,22:$V31,75:$VG,80:$V41,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL}),o($Vd1,[2,111],{16:$VE,22:$V31,75:$VG,80:$V41,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL}),o([5,7,8,13,14,18,19,24,25,27,28,31,33,35,36,39,41,42,44,45,47,48,50,51,52,53,54,59,63,64,65,73,76,77,93,94,95,96,97,98,99,100,101,102],[2,112],{16:$VE,22:$V31,75:$VG,80:$V41,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS}),o([5,7,8,13,14,18,19,24,25,27,28,31,33,35,36,39,41,42,44,45,47,48,50,51,52,53,54,59,63,64,65,73,76,77,94,95,96,97,98,99,100,101,102],[2,113],{16:$VE,22:$V31,75:$VG,80:$V41,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT}),o([5,7,8,13,14,18,19,24,25,27,28,31,33,35,36,39,41,42,44,45,47,48,50,51,52,53,54,59,63,64,65,73,76,77,95,96,97,98,99,100,101,102],[2,114],{16:$VE,22:$V31,75:$VG,80:$V41,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT,94:$VU}),{16:$VE,18:[1,166],22:$V31,73:$VF,75:$VG,80:$V41,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT,94:$VU,95:$VV},o($VW,[2,85]),{14:$Vo,22:$Vp,25:$Vq,34:167,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},o($VW,[2,87]),{14:$Vo,22:$Vp,25:$Vq,34:168,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},{14:$Vo,22:$Vp,25:$Vq,34:169,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},{24:[1,170]},{14:$Vo,22:$Vp,25:$Vq,34:171,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},{25:[1,172]},{25:[1,173]},o($V71,$V81,{26:174}),o([5,7,8,13,14,22,25,27,28,31,33,35,36,39,41,42,45,47,48,50,51,52,53,54,59,63,65,76,77,80,96,97,98,99,100,101,102],[2,10]),{11:175,14:$Vn,21:53,45:$V4,47:$V5,48:$V6,49:15,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb},{11:178,12:181,13:$V1,14:$Ve1,21:53,22:$Vp,25:$Vq,27:[1,176],29:177,30:179,31:$Vf1,32:182,33:$Vg1,34:189,35:$Vh1,36:$Vi1,39:$Vj1,41:$Vk1,42:$Vl1,45:$V4,47:$V5,48:$V6,49:15,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,59:$Vm1,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},{14:$Vo,22:$Vp,25:$Vq,34:192,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},o($VW,[2,72]),o($VW,[2,73]),{14:$Vo,22:$Vp,25:$Vq,30:193,34:194,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},{14:$Vo,22:$Vp,25:$Vq,34:195,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},o($VW,[2,79]),o([19,24,27],[2,76],{16:$VE,22:$V31,73:$VF,75:$VG,80:$V41,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT,94:$VU,95:$VV}),o([5,7,8,13,14,16,18,19,22,24,25,27,28,31,33,35,36,39,41,42,44,45,47,48,50,51,52,53,54,59,63,64,65,73,76,77,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102],[2,91],{75:$VG}),{16:$VE,18:[1,196],22:$V31,73:$VF,75:$VG,80:$V41,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT,94:$VU,95:$VV},o($VW,[2,94]),{16:$VE,18:[1,197],22:$V31,73:$VF,75:$VG,80:$V41,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT,94:$VU,95:$VV},o($V71,$V81,{26:198}),o($V71,$V81,{26:199}),{11:178,12:181,13:$V1,14:$Ve1,21:53,22:$Vp,25:$Vq,27:[1,200],29:177,30:179,31:$Vf1,32:182,33:$Vg1,34:189,35:$Vh1,36:$Vi1,39:$Vj1,41:$Vk1,42:$Vl1,45:$V4,47:$V5,48:$V6,49:15,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,59:$Vm1,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},o($V61,[2,11]),o($Vd,[2,15]),o($Vn1,[2,22],{7:[1,201]}),o($Vo1,[2,25]),o($Vo1,[2,26]),o($Vo1,[2,27]),o($Vo1,[2,28]),o($Vo1,[2,29]),{22:[1,202]},{25:[1,203]},{22:[1,204]},{22:[1,205]},{14:$Vo,22:$Vp,25:$Vq,34:206,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},{25:[1,207]},{7:[1,208],16:$VE,22:$V31,44:$V91,73:$VF,75:$VG,80:$V41,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT,94:$VU,95:$VV},o([7,16,22,44,73,75,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95],$VX,{14:$VC,78:$VY,79:$VZ}),{22:[1,209]},o([5,7,8,13,14,18,19,24,25,27,28,31,33,35,36,39,41,42,44,45,47,48,50,51,52,53,54,59,63,64,65,76,77,96,97,98,99,100,101,102],[2,86],{16:$VE,22:$V31,73:$VF,75:$VG,80:$V41,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT,94:$VU,95:$VV}),o($Vl,[2,74]),{16:$VE,22:$V31,44:$V91,73:$VF,75:$VG,80:$V41,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT,94:$VU,95:$VV},o([7,13,14,19,24,25,27,31,33,35,36,39,41,42,45,47,48,50,51,52,53,54,59,63,65,76,77,96,97,98,99,100,101,102],[2,45],{16:$VE,22:$V31,73:$VF,75:$VG,80:$V41,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT,94:$VU,95:$VV}),o($VW,[2,92]),o($VW,[2,93]),{11:178,12:181,13:$V1,14:$Ve1,21:53,22:$Vp,25:$Vq,27:[1,210],29:177,30:179,31:$Vf1,32:182,33:$Vg1,34:189,35:$Vh1,36:$Vi1,39:$Vj1,41:$Vk1,42:$Vl1,45:$V4,47:$V5,48:$V6,49:15,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,59:$Vm1,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},{11:178,12:181,13:$V1,14:$Ve1,21:53,22:$Vp,25:$Vq,27:[1,211],29:177,30:179,31:$Vf1,32:182,33:$Vg1,34:189,35:$Vh1,36:$Vi1,39:$Vj1,41:$Vk1,42:$Vl1,45:$V4,47:$V5,48:$V6,49:15,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,59:$Vm1,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},o($Vd,[2,17]),o($Vn1,[2,23]),{14:$Vo,22:$Vp,25:$Vq,34:212,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},o($V71,$V81,{26:213}),{7:[2,56],11:215,14:$Ve1,21:53,22:$Vp,25:$Vq,30:216,34:194,37:214,45:$V4,47:$V5,48:$V6,49:15,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},{14:$Vo,22:$Vp,25:$Vq,34:217,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},o([7,13,14,25,27,31,33,35,36,39,41,42,45,47,48,50,51,52,53,54,59,63,65,76,77,96,97,98,99,100,101,102],[2,35],{16:$VE,22:$V31,73:$VF,75:$VG,80:$V41,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT,94:$VU,95:$VV}),o($V71,$V81,{26:218}),o($Vo1,[2,37]),{14:$Vo,22:$Vp,25:$Vq,34:219,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},o($Vd,[2,16]),o($Vd,[2,18]),{16:$VE,22:$V31,24:[1,220],73:$VF,75:$VG,80:$V41,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT,94:$VU,95:$VV},{11:178,12:181,13:$V1,14:$Ve1,21:53,22:$Vp,25:$Vq,27:[1,221],29:177,30:179,31:$Vf1,32:182,33:$Vg1,34:189,35:$Vh1,36:$Vi1,39:$Vj1,41:$Vk1,42:$Vl1,45:$V4,47:$V5,48:$V6,49:15,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,59:$Vm1,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},{7:[1,222]},{7:[2,54]},{7:[2,55]},{16:$VE,22:$V31,24:[1,223],73:$VF,75:$VG,80:$V41,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT,94:$VU,95:$VV},{11:178,12:181,13:$V1,14:$Ve1,21:53,22:$Vp,25:$Vq,27:[1,224],29:177,30:179,31:$Vf1,32:182,33:$Vg1,34:189,35:$Vh1,36:$Vi1,39:$Vj1,41:$Vk1,42:$Vl1,45:$V4,47:$V5,48:$V6,49:15,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,59:$Vm1,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},{16:$VE,22:$V31,24:[1,225],73:$VF,75:$VG,80:$V41,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT,94:$VU,95:$VV},{25:[1,226]},{33:[1,227]},{7:[1,229],14:$Vo,22:$Vp,25:$Vq,34:228,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},{25:[1,230]},{43:[1,231]},{25:[1,232]},o($V71,$V81,{26:233}),{22:[1,234]},{7:[1,235],16:$VE,22:$V31,73:$VF,75:$VG,80:$V41,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT,94:$VU,95:$VV},{14:$Vo,22:$Vp,24:$Vp1,25:$Vq,30:237,34:238,38:236,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},{40:239,62:240,63:$Vq1,65:$Vr1},{22:[1,243]},o($V71,$V81,{26:244}),{11:178,12:181,13:$V1,14:$Ve1,21:53,22:$Vp,25:$Vq,27:[1,245],29:177,30:179,31:$Vf1,32:182,33:$Vg1,34:189,35:$Vh1,36:$Vi1,39:$Vj1,41:$Vk1,42:$Vl1,45:$V4,47:$V5,48:$V6,49:15,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,59:$Vm1,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},{14:$Vo,22:$Vp,25:$Vq,34:246,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},{14:$Vo,22:$Vp,24:$Vp1,25:$Vq,30:237,34:238,38:247,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},{24:[1,248]},{24:[2,57]},{16:$VE,22:$V31,24:[2,58],44:$V91,73:$VF,75:$VG,80:$V41,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT,94:$VU,95:$VV},{27:[1,249],62:250,63:$Vq1,65:$Vr1},o($Vs1,[2,69]),{14:$Vo,22:$Vp,25:$Vq,34:251,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},{64:[1,252]},{14:[1,253]},{11:178,12:181,13:$V1,14:$Ve1,21:53,22:$Vp,25:$Vq,27:[1,254],29:177,30:179,31:$Vf1,32:182,33:$Vg1,34:189,35:$Vh1,36:$Vi1,39:$Vj1,41:$Vk1,42:$Vl1,45:$V4,47:$V5,48:$V6,49:15,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,59:$Vm1,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},o($Vo1,[2,30]),{16:$VE,22:$V31,24:[1,255],73:$VF,75:$VG,80:$V41,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT,94:$VU,95:$VV},{24:[1,256]},{25:[1,257]},o($Vo1,[2,34]),o($Vs1,[2,68]),{16:$VE,22:$V31,64:[1,258],73:$VF,75:$VG,80:$V41,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO,89:$VP,90:$VQ,91:$VR,92:$VS,93:$VT,94:$VU,95:$VV},o($Vn1,$V81,{26:259}),{14:[1,260]},o($Vo1,[2,64],{60:261,61:[1,262]}),o($Vo1,[2,31]),{25:[1,263]},o($V71,$V81,{26:264}),o($Vn1,$V81,{26:265}),o($Vs1,[2,71],{49:15,21:53,70:57,66:58,71:59,72:60,69:63,74:64,29:177,11:178,30:179,12:181,32:182,34:189,13:$V1,14:$Ve1,22:$Vp,25:$Vq,31:$Vf1,33:$Vg1,35:$Vh1,36:$Vi1,39:$Vj1,41:$Vk1,42:$Vl1,45:$V4,47:$V5,48:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,59:$Vm1,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA}),{24:[1,266]},o($Vo1,[2,65]),{25:[1,268],32:267,59:$Vm1},o($V71,$V81,{26:269}),{11:178,12:181,13:$V1,14:$Ve1,21:53,22:$Vp,25:$Vq,27:[1,270],29:177,30:179,31:$Vf1,32:182,33:$Vg1,34:189,35:$Vh1,36:$Vi1,39:$Vj1,41:$Vk1,42:$Vl1,45:$V4,47:$V5,48:$V6,49:15,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,59:$Vm1,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},o($Vs1,[2,70],{49:15,21:53,70:57,66:58,71:59,72:60,69:63,74:64,29:177,11:178,30:179,12:181,32:182,34:189,13:$V1,14:$Ve1,22:$Vp,25:$Vq,31:$Vf1,33:$Vg1,35:$Vh1,36:$Vi1,39:$Vj1,41:$Vk1,42:$Vl1,45:$V4,47:$V5,48:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,59:$Vm1,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA}),{25:[1,271]},o($Vo1,[2,66]),o($V71,$V81,{26:272}),{11:178,12:181,13:$V1,14:$Ve1,21:53,22:$Vp,25:$Vq,27:[1,273],29:177,30:179,31:$Vf1,32:182,33:$Vg1,34:189,35:$Vh1,36:$Vi1,39:$Vj1,41:$Vk1,42:$Vl1,45:$V4,47:$V5,48:$V6,49:15,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,59:$Vm1,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},o($Vo1,[2,33]),o($V71,$V81,{26:274}),{11:178,12:181,13:$V1,14:$Ve1,21:53,22:$Vp,25:$Vq,27:[1,275],29:177,30:179,31:$Vf1,32:182,33:$Vg1,34:189,35:$Vh1,36:$Vi1,39:$Vj1,41:$Vk1,42:$Vl1,45:$V4,47:$V5,48:$V6,49:15,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,59:$Vm1,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},o($Vo1,[2,32]),{11:178,12:181,13:$V1,14:$Ve1,21:53,22:$Vp,25:$Vq,27:[1,276],29:177,30:179,31:$Vf1,32:182,33:$Vg1,34:189,35:$Vh1,36:$Vi1,39:$Vj1,41:$Vk1,42:$Vl1,45:$V4,47:$V5,48:$V6,49:15,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,59:$Vm1,66:58,69:63,70:57,71:59,72:60,74:64,76:$Vr,77:$Vs,80:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:$Vz,102:$VA},o($Vo1,[2,67]),o($Vo1,[2,36])],
defaultActions: {16:[2,48],21:[2,1],44:[2,49],49:[2,47],215:[2,54],216:[2,55],237:[2,57]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
var strBuffer = "";
	const TYPE_OP       	= require('./instructions').TYPE_OP;
	const TYPE_VAL      	= require('./instructions').TYPE_VAL;
	const AST_API       	= require('./instructions').AST_API;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:/* IGNORE */
break;
case 2:/* IGNORE */
break;
case 3:return 75;
break;
case 4:return 7;
break;
case 5:return "COMMA";
break;
case 6:return "COLONEQUAL"
break;
case 7:return 73;
break;
case 8:return "COLON";
break;
case 9:return 78;
break;
case 10:return 79;
break;
case 11:return 81;
break;
case 12:return 80;
break;
case 13:return 82;
break;
case 14:return 83;
break;
case 15:return 84;
break;
case 16:return "POW"
break;
case 17:return 90;
break;
case 18:return "LESS";
break;
case 19:return 92;
break;
case 20:return 91;
break;
case 21:return 86;
break;
case 22:return 87;
break;
case 23:return 88;
break;
case 24:return "EQUAL";
break;
case 25:return 16;
break;
case 26:return 18;
break;
case 27:return 22;
break;
case 28:return 24;
break;
case 29:return 25;
break;
case 30:return 27;
break;
case 31:return 93;
break;
case 32:return 94;
break;
case 33:return 95;
break;
case 34:return 96;
break;
case 35:return 77;
break;
case 36:return 102;
break;
case 37:return 51;
break;
case 38:return 52;
break;
case 39:return 53;
break;
case 40:return 54;
break;
case 41:return 8;
break;
case 42:return 45;
break;
case 43:return "R_CONST";
break;
case 44:return "R_GLOBAL";
break;
case 45:return 59;
break;
case 46:return 61;
break;
case 47:return 39;
break;
case 48:return 63;
break;
case 49:return 56;
break;
case 50:return 57;
break;
case 51:return 58;
break;
case 52:return 36;
break;
case 53:return 33;
break;
case 54:return 35;
break;
case 55:return 50;
break;
case 56:return "R_DEFINE";
break;
case 57:return "R_AS";
break;
case 58:return "R_STRC";
break;
case 59:return "R_TRY";
break;
case 60:return "R_CATCH";
break;
case 61:return "R_THROW";
break;
case 62:return 99;
break;
case 63:return 99;
break;
case 64:return 98;
break;
case 65:return 97;
break;
case 66: strBuffer = ""; this.begin('STRING'); 
break;
case 67: this.begin('CHAR'); 
break;
case 68:return 20;
break;
case 69:return 14;
break;
case 70: this.popState(); yy_.yytext = strBuffer; return 101; 
break;
case 71: strBuffer += "\""; 
break;
case 72: strBuffer += "\\"; 
break;
case 73: strBuffer += "\n"; 
break;
case 74: strBuffer += "\r"; 
break;
case 75: strBuffer += "\t"; 
break;
case 76: strBuffer += yy_.yytext; 
break;
case 77: console.log("TODO error unclosed String"); 
break;
case 78: yy_.yytext = "'"; this.popState(); return 100; 
break;
case 79: yy_.yytext = "\\"; this.popState(); return 100; 
break;
case 80: yy_.yytext = "\n"; this.popState(); return 100; 
break;
case 81: yy_.yytext = "\t"; this.popState(); return 100; 
break;
case 82: yy_.yytext = "\t"; this.popState(); return 100; 
break;
case 83: yy_.yytext = "\0"; this.popState(); return 100; 
break;
case 84: yy_.yytext = yy_.yytext.slice(0, -1);  this.popState(); return 100; 
break;
case 85: yy_.yytext = "\0"; this.popState(); return 100; 
break;
case 86: console.log("TODO error invalid Char... skipping"); this.popState(); 
break;
case 87:return 5;
break;
case 88: console.error('Error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\.)/i,/^(?:;)/i,/^(?:,)/i,/^(?::=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\^\^)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:===)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\^)/i,/^(?:!)/i,/^(?:\$)/i,/^(?:null\b)/i,/^(?:integer\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:import\b)/i,/^(?:var\b)/i,/^(?:const\b)/i,/^(?:global\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:continue\b)/i,/^(?:break\b)/i,/^(?:return\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:void\b)/i,/^(?:define\b)/i,/^(?:as\b)/i,/^(?:strc\b)/i,/^(?:try\b)/i,/^(?:catch\b)/i,/^(?:throw\b)/i,/^(?:false\b)/i,/^(?:true\b)/i,/^(?:[0-9]+(\.[0-9]+)?)/i,/^(?:[0-9]+)/i,/^(?:")/i,/^(?:')/i,/^(?:([a-zA-Z])[a-zA-ZñÑ0-9_]*\.js\b)/i,/^(?:([a-zA-Z])[a-zA-ZñÑ0-9_]*)/i,/^(?:")/i,/^(?:\\")/i,/^(?:\\\\)/i,/^(?:\\n)/i,/^(?:\\r)/i,/^(?:\\t)/i,/^(?:.)/i,/^(?:$)/i,/^(?:\\'')/i,/^(?:\\\\')/i,/^(?:\\n')/i,/^(?:\\r')/i,/^(?:\\t')/i,/^(?:\\0')/i,/^(?:[^']')/i,/^(?:')/i,/^(?:.)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"CHAR":{"rules":[78,79,80,81,82,83,84,85,86],"inclusive":false},"STRING":{"rules":[70,71,72,73,74,75,76,77],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,87,88],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}