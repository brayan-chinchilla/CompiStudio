/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,17],$V2=[1,8],$V3=[1,9],$V4=[1,10],$V5=[1,11],$V6=[1,12],$V7=[1,13],$V8=[1,14],$V9=[1,15],$Va=[1,16],$Vb=[5,8,15,22,37,39,40,41,42,43,44,45],$Vc=[5,7,8,15,22,37,39,40,41,42,43,44,45],$Vd=[2,40],$Ve=[5,7,8,12,15,22,37,39,40,41,42,43,44,45],$Vf=[2,33],$Vg=[1,31],$Vh=[12,18],$Vi=[2,15],$Vj=[1,41],$Vk=[1,47],$Vl=[1,46],$Vm=[1,56],$Vn=[1,57],$Vo=[1,50],$Vp=[1,51],$Vq=[1,52],$Vr=[1,53],$Vs=[1,54],$Vt=[1,55],$Vu=[1,63],$Vv=[5,7,8,12,15,18,21,22,26,28,30,31,34,37,39,40,41,42,43,44,45,50,54,56],$Vw=[1,65],$Vx=[1,81],$Vy=[1,82],$Vz=[1,67],$VA=[1,66],$VB=[1,68],$VC=[1,69],$VD=[1,70],$VE=[1,71],$VF=[1,72],$VG=[1,73],$VH=[1,74],$VI=[1,75],$VJ=[1,76],$VK=[1,77],$VL=[1,78],$VM=[1,79],$VN=[1,80],$VO=[5,7,8,12,15,18,21,22,26,28,30,31,34,37,39,40,41,42,43,44,45,50,54,55,56,60,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82],$VP=[2,64],$VQ=[1,83],$VR=[1,84],$VS=[2,62],$VT=[1,112],$VU=[12,18,21],$VV=[5,7,8,12,15,18,21,22,26,28,30,31,34,37,39,40,41,42,43,44,45,50,54,55,56,60,64,66,67,68,69,74,75,76,77,78,79,80,81,82],$VW=[15,21,26,28,30,31,34,37,39,40,41,42,43,44,45,50],$VX=[2,18],$VY=[5,7,8,12,15,18,21,22,26,28,30,31,34,37,39,40,41,42,43,44,45,50,54,55,56,60,64,66,67,68,69,70,71,72,74,75,76,77,78,79,80,81,82],$VZ=[5,7,8,12,15,18,21,22,26,28,30,31,34,37,39,40,41,42,43,44,45,50,54,55,56,60,64,66,67,74,75,80,81,82],$V_=[5,7,8,12,15,18,21,22,26,28,30,31,34,37,39,40,41,42,43,44,45,50,54,55,56,60,64,66,67,74,75,76,77,78,79,80,81,82],$V$=[1,132],$V01=[1,126],$V11=[1,128],$V21=[1,129],$V31=[1,130],$V41=[1,131],$V51=[1,133],$V61=[15,21,26,28,30,31,34,37,39,40,41,42,43,44,45,50,54,56],$V71=[7,15,21,26,28,30,31,34,37,39,40,41,42,43,44,45,50,54,56],$V81=[1,141],$V91=[1,170],$Va1=[2,46],$Vb1=[1,173],$Vc1=[1,174],$Vd1=[21,54,56];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"l_global":4,"EOF":5,"global":6,"SEMICOLON":7,"R_IMPORT":8,"import_list":9,"funcDeclar":10,"varDeclar":11,"COMMA":12,"FILENAME":13,"type":14,"ID":15,"PAR_L":16,"l_param":17,"PAR_R":18,"BRACE_L":19,"l_statement":20,"BRACE_R":21,"R_PUBLIC":22,"statement":23,"varAssign":24,"call":25,"jump_control":26,"if":27,"R_WHILE":28,"exp":29,"R_DO":30,"R_FOR":31,"for_init":32,"for_update":33,"R_SWITCH":34,"l_case":35,"EQUAL":36,"R_VAR":37,"COLONEQUAL":38,"R_CONST":39,"R_GLOBAL":40,"R_INTEGER":41,"R_DOUBLE":42,"R_CHAR":43,"R_BOOLEAN":44,"R_VOID":45,"jump":46,"R_CONTINUE":47,"R_BREAK":48,"R_RETURN":49,"R_IF":50,"if_else":51,"R_ELSE":52,"case":53,"R_CASE":54,"COLON":55,"R_DEFAULT":56,"l_exp":57,"access":58,"BRACKET_L":59,"BRACKET_R":60,"atomic":61,"exp_arithmetic":62,"exp_logic":63,"TERNARY":64,"update":65,"PLUSPLUS":66,"MINUSMINUS":67,"MINUS":68,"PLUS":69,"TIMES":70,"DIVIDE":71,"MODULE":72,"POW":73,"EQUALEQUAL":74,"NOTEQUAL":75,"LESS":76,"LESSEQUAL":77,"GREATER":78,"GREATEREQUAL":79,"AND":80,"OR":81,"XOR":82,"NOT":83,"LITERAL_INT":84,"LITERAL_DOUBLE":85,"LITERAL_BOOLEAN":86,"LITERAL_CHAR":87,"LITERAL_STRING":88,"R_NULL":89,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"SEMICOLON",8:"R_IMPORT",12:"COMMA",13:"FILENAME",15:"ID",16:"PAR_L",18:"PAR_R",19:"BRACE_L",21:"BRACE_R",22:"R_PUBLIC",26:"jump_control",28:"R_WHILE",30:"R_DO",31:"R_FOR",34:"R_SWITCH",36:"EQUAL",37:"R_VAR",38:"COLONEQUAL",39:"R_CONST",40:"R_GLOBAL",41:"R_INTEGER",42:"R_DOUBLE",43:"R_CHAR",44:"R_BOOLEAN",45:"R_VOID",47:"R_CONTINUE",48:"R_BREAK",49:"R_RETURN",50:"R_IF",52:"R_ELSE",54:"R_CASE",55:"COLON",56:"R_DEFAULT",59:"BRACKET_L",60:"BRACKET_R",64:"TERNARY",66:"PLUSPLUS",67:"MINUSMINUS",68:"MINUS",69:"PLUS",70:"TIMES",71:"DIVIDE",72:"MODULE",73:"POW",74:"EQUALEQUAL",75:"NOTEQUAL",76:"LESS",77:"LESSEQUAL",78:"GREATER",79:"GREATEREQUAL",80:"AND",81:"OR",82:"XOR",83:"NOT",84:"LITERAL_INT",85:"LITERAL_DOUBLE",86:"LITERAL_BOOLEAN",87:"LITERAL_CHAR",88:"LITERAL_STRING",89:"R_NULL"},
productions_: [0,[3,2],[4,2],[4,1],[4,3],[4,2],[6,2],[6,1],[6,1],[9,3],[9,1],[10,8],[10,9],[17,3],[17,1],[17,0],[20,2],[20,3],[20,0],[23,1],[23,1],[23,1],[23,1],[23,1],[23,7],[23,8],[23,11],[23,10],[23,7],[11,4],[11,4],[11,4],[11,4],[11,2],[24,3],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[32,1],[32,1],[32,0],[33,1],[33,1],[33,0],[46,1],[46,1],[46,1],[46,2],[27,7],[27,8],[51,2],[51,4],[35,2],[35,1],[53,4],[53,3],[25,4],[57,3],[57,1],[57,0],[58,4],[29,1],[29,1],[29,1],[29,1],[29,1],[29,3],[29,5],[29,3],[29,1],[29,1],[65,2],[65,2],[62,2],[62,3],[62,3],[62,3],[62,3],[62,3],[62,3],[63,3],[63,3],[63,3],[63,3],[63,3],[63,3],[63,3],[63,3],[63,3],[63,2],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2: case 16: case 55:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 10: case 14: case 56: case 61:
 this.$ = [$$[$0]]; 
break;
case 4: case 17:
 $$[$0-2].push($$[$0-1]); this.$ = $$[$0-2]; 
break;
case 5:
 this.$ = [$$[$0-1]]; 
break;
case 6:
 this.$ = {type: TYPE_OP.IMPORT, import: $$[$0] };
break;
case 7: case 8: case 19: case 20: case 21: case 22: case 23: case 41: case 42: case 44: case 45: case 53: case 65: case 66: case 67: case 68: case 72: case 73:
 this.$ = $$[$0]; 
break;
case 9: case 13: case 60:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 11: case 12:
 this.$ = {type: TYPE_OP.FUNC_DEF, returnType: $$[$0-7], name: $$[$0-6], params: $$[$0-4], block: $$[$0-1] }; 
break;
case 15: case 18: case 62:
 this.$ = []; 
break;
case 24:
 this.$ = {type: TYPE_OP.WHILE, cond: $$[$0-4], block: $$[$0-1] }; 
break;
case 25:
 this.$ = {type: TYPE_OP.DO_WHILE, block: $$[$0-5], cond: $$[$0-1] }; 
break;
case 26:
 this.$ = {type: TYPE_OP.FOR, init: $$[$0-8], cond: $$[$0-6], update: $$[$0-4], block: $$[$0-1] }; 
break;
case 27:
 this.$ = {type: TYPE_OP.FOR, init: $$[$0-7], cond: null, update: $$[$0-4], block: $$[$0-1] }; 
break;
case 28:
 this.$ = {type: TYPE_OP.SWITCH, switch: $$[$0-4], cases: $$[$0-1] }; 
break;
case 29: case 30: case 31: case 32:
 this.$ = {type: TYPE_OP.DECLAR, jType: $$[$0-3], id: $$[$0-2], exp: $$[$0]} 
break;
case 33:
 this.$ = {type: TYPE_OP.DECLAR, jType: $$[$0-1], id: $$[$0], exp: null} 
break;
case 34:
 this.$ = {type: TYPE_OP.ASSIGN, id:$$[$0-2], exp: $$[$0]} 
break;
case 35:
 this.$ = TYPE_VAL.INTEGER 
break;
case 36:
 this.$ = TYPE_VAL.DOUBLE 
break;
case 37:
 this.$ = TYPE_VAL.CHAR 
break;
case 38:
 this.$ = TYPE_VAL.BOOLEAN 
break;
case 39:
 this.$ = TYPE_VAL.VOID 
break;
case 40:
 this.$ = $$[$0] 
break;
case 43: case 46:
 this.$ = null; 
break;
case 47:
 this.$ = {type: TYPE_OP.CONTINUE }; 
break;
case 48:
 this.$ = {type: TYPE_OP.BREAK }; 
break;
case 49:
 this.$ = {type: TYPE_OP.RETURN, exp: null }; 
break;
case 50:
 this.$ = {type: TYPE_OP.RETURN, exp: $$[$0] }; 
break;
case 51:
 this.$ = {type: TYPE_OP.IF, cond: $$[$0-4], ifTrue: $$[$0-1], ifFalse: null }; 
break;
case 52:
 this.$ = {type: TYPE_OP.IF, cond: $$[$0-5], ifTrue: $$[$0-2], ifFalse: $$[$0] }; 
break;
case 54:
 this.$ = {type: TYPE_OP.IF, cond: null, ifTrue: $$[$0-1], ifFalse: null }; 
break;
case 57:
 this.$ = {type: TYPE_OP.CASE, cond: $$[$0-2], ifTrue: $$[$0] }; 
break;
case 58:
 this.$ = {type: TYPE_OP.CASE, cond: null, ifTrue: $$[$0] }; 
break;
case 59:
 this.$ = {type:TYPE_OP.CALL, call: $$[$0-3], params: $$[$0-1] }; 
break;
case 63:
 this.$ = {type: TYPE_OP.ACCESS, base: $$[$0-3], index: $$[$0-1]} 
break;
case 64:
 this.$ = { type: TYPE_OP.ID, val:$$[$0] }; 
break;
case 69:
 this.$ = AST_API.newVal(TYPE_VAL.ARRAY, $$[$0-2]); 
break;
case 70:
 this.$ = {type: TYPE_OP.TERNARY, cond: $$[$0-4], ifTrue: $$[$0-2], ifFalse: $$[$0] }; 
break;
case 71:
 this.$ = $$[$0-1]; 
break;
case 74:
 this.$ = {type: TYPE_OP.PLUSPLUS, op1: $$[$0-1]}; 
break;
case 75:
 this.$ = {type: TYPE_OP.MINUSMINUS, op1: $$[$0-1]}; 
break;
case 76:
 this.$ = {type: TYPE_OP.UMINUS, op1: $$[$0]}; 
break;
case 77:
 this.$ = {type: TYPE_OP.PLUS, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0]}; 
break;
case 78:
 this.$ = {type: TYPE_OP.MINUS, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0]}; 
break;
case 79:
 this.$ = {type: TYPE_OP.TIMES, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0]}; 
break;
case 80:
 this.$ = {type: TYPE_OP.DIVIDE, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0]}; 
break;
case 81:
 this.$ = {type: TYPE_OP.MODULE, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0]}; 
break;
case 82:
 this.$ = {type: TYPE_OP.POW, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0]}; 
break;
case 83:
 this.$ = {type: TYPE_OP.EQUALEQUAL, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0]}; 
break;
case 84:
 this.$ = {type: TYPE_OP.NOTEQUAL, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0]}; 
break;
case 85:
 this.$ = {type: TYPE_OP.LESS, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0]}; 
break;
case 86:
 this.$ = {type: TYPE_OP.LESSEQUAL, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0]}; 
break;
case 87:
 this.$ = {type: TYPE_OP.GREATER, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0]}; 
break;
case 88:
 this.$ = {type: TYPE_OP.GREATEREQUAL, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0]}; 
break;
case 89:
 this.$ = {type: TYPE_OP.AND, op1: $$[$0-2], op2: $$[$0]}; 
break;
case 90:
 this.$ = {type: TYPE_OP.OR, op1: $$[$0-2], op2: $$[$0]}; 
break;
case 91:
 this.$ = {type: TYPE_OP.XOR, op1: $$[$0-2], op2: $$[$0]}; 
break;
case 92:
 this.$ = {type: TYPE_OP.NOT, op1: $$[$0]}; 
break;
case 93:
 this.$ = AST_API.newVal(TYPE_VAL.INTEGER, Number($$[$0])); 
break;
case 94:
 this.$ = AST_API.newVal(TYPE_VAL.DOUBLE, Number($$[$0])); 
break;
case 95:
 this.$ = AST_API.newVal(TYPE_VAL.BOOLEAN, $$[$0].toLowerCase() == "true" ? 1 : 0 ); 
break;
case 96:
 this.$ = AST_API.newVal(TYPE_VAL.CHAR, $$[$0].charCodeAt(0)); 
break;
case 97:
 this.$ = AST_API.newVal(TYPE_VAL.STRING, $$[$0]); 
break;
case 98:
 this.$ = AST_API.newVal(TYPE_VAL.NULL, -1); 
break;
}
},
table: [{3:1,4:2,6:3,8:$V0,10:5,11:6,14:7,15:$V1,22:$V2,37:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va},{1:[3]},{5:[1,18],6:19,8:$V0,10:5,11:6,14:7,15:$V1,22:$V2,37:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va},o($Vb,[2,3],{7:[1,20]}),{9:21,13:[1,22]},o($Vc,[2,7]),o($Vc,[2,8]),{15:[1,23]},{14:24,15:$V1,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va},{15:[1,25]},{15:[1,26]},{15:[1,27]},{15:[2,35]},{15:[2,36]},{15:[2,37]},{15:[2,38]},{15:[2,39]},{15:$Vd},{1:[2,1]},o($Vb,[2,2],{7:[1,28]}),o($Vb,[2,5]),o($Vc,[2,6],{12:[1,29]}),o($Ve,[2,10]),o($Vc,$Vf,{16:[1,30],36:$Vg}),{15:[1,32]},{38:[1,33]},{38:[1,34]},{38:[1,35]},o($Vb,[2,4]),{13:[1,36]},o($Vh,$Vi,{17:37,11:38,14:39,15:$V1,37:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va}),{15:$Vj,16:$Vk,19:$Vl,25:43,29:40,58:48,61:42,62:44,63:45,65:49,68:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{16:[1,58]},{15:$Vj,16:$Vk,19:$Vl,25:43,29:59,58:48,61:42,62:44,63:45,65:49,68:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{15:$Vj,16:$Vk,19:$Vl,25:43,29:60,58:48,61:42,62:44,63:45,65:49,68:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{15:$Vj,16:$Vk,19:$Vl,25:43,29:61,58:48,61:42,62:44,63:45,65:49,68:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},o($Ve,[2,9]),{12:$Vu,18:[1,62]},o($Vh,[2,14]),{15:[1,64]},o($Vv,[2,29],{64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN}),o($VO,$VP,{16:$VQ,59:$VR}),o($VO,[2,65]),o($VO,[2,66]),o($VO,[2,67]),o($VO,[2,68]),o([12,21],$VS,{61:42,25:43,62:44,63:45,58:48,65:49,57:85,29:86,15:$Vj,16:$Vk,19:$Vl,68:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt}),{15:$Vj,16:$Vk,19:$Vl,25:43,29:87,58:48,61:42,62:44,63:45,65:49,68:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},o($VO,[2,72]),o($VO,[2,73]),o($VO,[2,93]),o($VO,[2,94]),o($VO,[2,95]),o($VO,[2,96]),o($VO,[2,97]),o($VO,[2,98]),{15:$Vj,16:$Vk,19:$Vl,25:43,29:88,58:48,61:42,62:44,63:45,65:49,68:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{15:$Vj,16:$Vk,19:$Vl,25:43,29:89,58:48,61:42,62:44,63:45,65:49,68:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},o($Vh,$Vi,{11:38,14:39,17:90,15:$V1,37:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va}),o($Vv,[2,30],{64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN}),o($Vv,[2,31],{64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN}),o($Vv,[2,32],{64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN}),{19:[1,91]},{11:92,14:39,15:$V1,37:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va},o([7,12,15,18,21,26,28,30,31,34,37,39,40,41,42,43,44,45,50,54,56],$Vf,{36:$Vg}),{15:$Vj,16:$Vk,19:$Vl,25:43,29:93,58:48,61:42,62:44,63:45,65:49,68:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{15:$Vj,16:$Vk,19:$Vl,25:43,29:94,58:48,61:42,62:44,63:45,65:49,68:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{15:$Vj,16:$Vk,19:$Vl,25:43,29:95,58:48,61:42,62:44,63:45,65:49,68:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{15:$Vj,16:$Vk,19:$Vl,25:43,29:96,58:48,61:42,62:44,63:45,65:49,68:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{15:$Vj,16:$Vk,19:$Vl,25:43,29:97,58:48,61:42,62:44,63:45,65:49,68:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{15:$Vj,16:$Vk,19:$Vl,25:43,29:98,58:48,61:42,62:44,63:45,65:49,68:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{15:$Vj,16:$Vk,19:$Vl,25:43,29:99,58:48,61:42,62:44,63:45,65:49,68:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{15:$Vj,16:$Vk,19:$Vl,25:43,29:100,58:48,61:42,62:44,63:45,65:49,68:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{15:$Vj,16:$Vk,19:$Vl,25:43,29:101,58:48,61:42,62:44,63:45,65:49,68:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{15:$Vj,16:$Vk,19:$Vl,25:43,29:102,58:48,61:42,62:44,63:45,65:49,68:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{15:$Vj,16:$Vk,19:$Vl,25:43,29:103,58:48,61:42,62:44,63:45,65:49,68:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{15:$Vj,16:$Vk,19:$Vl,25:43,29:104,58:48,61:42,62:44,63:45,65:49,68:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{15:$Vj,16:$Vk,19:$Vl,25:43,29:105,58:48,61:42,62:44,63:45,65:49,68:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{15:$Vj,16:$Vk,19:$Vl,25:43,29:106,58:48,61:42,62:44,63:45,65:49,68:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{15:$Vj,16:$Vk,19:$Vl,25:43,29:107,58:48,61:42,62:44,63:45,65:49,68:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{15:$Vj,16:$Vk,19:$Vl,25:43,29:108,58:48,61:42,62:44,63:45,65:49,68:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},o($VO,[2,74]),o($VO,[2,75]),o($Vh,$VS,{61:42,25:43,62:44,63:45,58:48,65:49,29:86,57:109,15:$Vj,16:$Vk,19:$Vl,68:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt}),{15:$Vj,16:$Vk,19:$Vl,25:43,29:110,58:48,61:42,62:44,63:45,65:49,68:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{12:$VT,21:[1,111]},o($VU,[2,61],{64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN}),{18:[1,113],64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN},o($VV,[2,76],{70:$VB,71:$VC,72:$VD,73:$VE}),o($VO,[2,92]),{12:$Vu,18:[1,114]},o($VW,$VX,{20:115}),o($Vh,[2,13]),{55:[1,116],64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN},o($VV,[2,77],{70:$VB,71:$VC,72:$VD,73:$VE}),o($VV,[2,78],{70:$VB,71:$VC,72:$VD,73:$VE}),o($VY,[2,79],{73:$VE}),o($VY,[2,80],{73:$VE}),o($VY,[2,81],{73:$VE}),o($VY,[2,82],{73:$VE}),o($VZ,[2,83],{68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,76:$VH,77:$VI,78:$VJ,79:$VK}),o($VZ,[2,84],{68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,76:$VH,77:$VI,78:$VJ,79:$VK}),o($V_,[2,85],{68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE}),o($V_,[2,86],{68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE}),o($V_,[2,87],{68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE}),o($V_,[2,88],{68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE}),o([5,7,8,12,15,18,21,22,26,28,30,31,34,37,39,40,41,42,43,44,45,50,54,55,56,60,64,66,67,80,81,82],[2,89],{68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK}),o([5,7,8,12,15,18,21,22,26,28,30,31,34,37,39,40,41,42,43,44,45,50,54,55,56,60,64,66,67,81,82],[2,90],{68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL}),o([5,7,8,12,15,18,21,22,26,28,30,31,34,37,39,40,41,42,43,44,45,50,54,55,56,60,64,66,67,82],[2,91],{68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM}),{12:$VT,18:[1,117]},{60:[1,118],64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN},o($VO,[2,69]),{15:$Vj,16:$Vk,19:$Vl,25:43,29:119,58:48,61:42,62:44,63:45,65:49,68:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},o($VO,[2,71]),{19:[1,120]},{11:123,14:39,15:$V$,21:[1,121],23:122,24:124,25:125,26:$V01,27:127,28:$V11,30:$V21,31:$V31,34:$V41,37:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,50:$V51},{15:$Vj,16:$Vk,19:$Vl,25:43,29:134,58:48,61:42,62:44,63:45,65:49,68:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},o($VO,[2,59]),o($VO,[2,63]),o($VU,[2,60],{64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN}),o($VW,$VX,{20:135}),o($Vc,[2,11]),o($V61,[2,16],{7:[1,136]}),o($V71,[2,19]),o($V71,[2,20]),o($V71,[2,21]),o($V71,[2,22]),o($V71,[2,23]),{16:[1,137]},{19:[1,138]},{16:[1,139]},{16:[1,140]},{15:$Vd,16:$VQ,36:$V81},{16:[1,142]},o([5,7,8,12,15,18,21,22,26,28,30,31,34,37,39,40,41,42,43,44,45,50,54,55,56,60],[2,70],{64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN}),{11:123,14:39,15:$V$,21:[1,143],23:122,24:124,25:125,26:$V01,27:127,28:$V11,30:$V21,31:$V31,34:$V41,37:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,50:$V51},o($V61,[2,17]),{15:$Vj,16:$Vk,19:$Vl,25:43,29:144,58:48,61:42,62:44,63:45,65:49,68:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},o($VW,$VX,{20:145}),{7:[2,43],11:147,14:39,15:[1,149],24:148,32:146,37:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va},{15:$Vj,16:$Vk,19:$Vl,25:43,29:150,58:48,61:42,62:44,63:45,65:49,68:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{15:$Vj,16:$Vk,19:$Vl,25:43,29:151,58:48,61:42,62:44,63:45,65:49,68:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{15:$Vj,16:$Vk,19:$Vl,25:43,29:152,58:48,61:42,62:44,63:45,65:49,68:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},o($Vc,[2,12]),{18:[1,153],64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN},{11:123,14:39,15:$V$,21:[1,154],23:122,24:124,25:125,26:$V01,27:127,28:$V11,30:$V21,31:$V31,34:$V41,37:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,50:$V51},{7:[1,155]},{7:[2,41]},{7:[2,42]},{15:$Vd,36:$V81},{18:[1,156],64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN},o([7,15,18,21,26,28,30,31,34,37,39,40,41,42,43,44,45,50,54,56],[2,34],{64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN}),{18:[1,157],64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN},{19:[1,158]},{28:[1,159]},{7:[1,161],15:$Vj,16:$Vk,19:$Vl,25:43,29:160,58:48,61:42,62:44,63:45,65:49,68:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{19:[1,162]},{19:[1,163]},o($VW,$VX,{20:164}),{16:[1,165]},{7:[1,166],64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN},{15:$V91,16:$Vk,18:$Va1,19:$Vl,24:168,25:43,29:169,33:167,58:48,61:42,62:44,63:45,65:49,68:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{35:171,53:172,54:$Vb1,56:$Vc1},o($VW,$VX,{20:175}),{11:123,14:39,15:$V$,21:[1,176],23:122,24:124,25:125,26:$V01,27:127,28:$V11,30:$V21,31:$V31,34:$V41,37:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,50:$V51},{15:$Vj,16:$Vk,19:$Vl,25:43,29:177,58:48,61:42,62:44,63:45,65:49,68:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{15:$V91,16:$Vk,18:$Va1,19:$Vl,24:168,25:43,29:169,33:178,58:48,61:42,62:44,63:45,65:49,68:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{18:[1,179]},{18:[2,44]},{18:[2,45],64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN},o([18,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82],$VP,{16:$VQ,36:$V81,59:$VR}),{21:[1,180],53:181,54:$Vb1,56:$Vc1},o($Vd1,[2,56]),{15:$Vj,16:$Vk,19:$Vl,25:43,29:182,58:48,61:42,62:44,63:45,65:49,68:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq,87:$Vr,88:$Vs,89:$Vt},{55:[1,183]},{11:123,14:39,15:$V$,21:[1,184],23:122,24:124,25:125,26:$V01,27:127,28:$V11,30:$V21,31:$V31,34:$V41,37:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,50:$V51},o($V71,[2,24]),{18:[1,185],64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN},{18:[1,186]},{19:[1,187]},o($V71,[2,28]),o($Vd1,[2,55]),{55:[1,188],64:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN},o($V61,$VX,{20:189}),o($V71,[2,51],{51:190,52:[1,191]}),o($V71,[2,25]),{19:[1,192]},o($VW,$VX,{20:193}),o($V61,$VX,{20:194}),o($Vd1,[2,58],{14:39,23:122,11:123,24:124,25:125,27:127,15:$V$,26:$V01,28:$V11,30:$V21,31:$V31,34:$V41,37:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,50:$V51}),o($V71,[2,52]),{19:[1,196],27:195,50:$V51},o($VW,$VX,{20:197}),{11:123,14:39,15:$V$,21:[1,198],23:122,24:124,25:125,26:$V01,27:127,28:$V11,30:$V21,31:$V31,34:$V41,37:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,50:$V51},o($Vd1,[2,57],{14:39,23:122,11:123,24:124,25:125,27:127,15:$V$,26:$V01,28:$V11,30:$V21,31:$V31,34:$V41,37:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,50:$V51}),o($V71,[2,53]),o($VW,$VX,{20:199}),{11:123,14:39,15:$V$,21:[1,200],23:122,24:124,25:125,26:$V01,27:127,28:$V11,30:$V21,31:$V31,34:$V41,37:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,50:$V51},o($V71,[2,27]),{11:123,14:39,15:$V$,21:[1,201],23:122,24:124,25:125,26:$V01,27:127,28:$V11,30:$V21,31:$V31,34:$V41,37:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,50:$V51},o($V71,[2,26]),o($V71,[2,54])],
defaultActions: {12:[2,35],13:[2,36],14:[2,37],15:[2,38],16:[2,39],17:[2,40],18:[2,1],147:[2,41],148:[2,42],168:[2,44]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
var strBuffer = "";
	const TYPE_OP       	= require('./instructions').TYPE_OP;
	const TYPE_VAL      	= require('./instructions').TYPE_VAL;
	const AST_API       	= require('./instructions').AST_API;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:/* IGNORE */
break;
case 2:/* IGNORE */
break;
case 3:return 'DOT';
break;
case 4:return 7;
break;
case 5:return "COMMA";
break;
case 6:return "COLONEQUAL"
break;
case 7:return 64;
break;
case 8:return "COLON";
break;
case 9:return 66;
break;
case 10:return 67;
break;
case 11:return 69;
break;
case 12:return 68;
break;
case 13:return 70;
break;
case 14:return 71;
break;
case 15:return 72;
break;
case 16:return "POW"
break;
case 17:return 77;
break;
case 18:return "LESS";
break;
case 19:return 79;
break;
case 20:return 78;
break;
case 21:return 'EQUALEQUALEQUAL';
break;
case 22:return 74;
break;
case 23:return 75;
break;
case 24:return "EQUAL";
break;
case 25:return 59;
break;
case 26:return 60;
break;
case 27:return 16;
break;
case 28:return 18;
break;
case 29:return 19;
break;
case 30:return 21;
break;
case 31:return 80;
break;
case 32:return 81;
break;
case 33:return 82;
break;
case 34:return 83;
break;
case 35:return 89;
break;
case 36:return 41;
break;
case 37:return 42;
break;
case 38:return 43;
break;
case 39:return 44;
break;
case 40:return 8;
break;
case 41:return 37;
break;
case 42:return "R_CONST";
break;
case 43:return "R_GLOBAL";
break;
case 44:return 50;
break;
case 45:return 52;
break;
case 46:return 34;
break;
case 47:return 54;
break;
case 48:return 47;
break;
case 49:return 48;
break;
case 50:return 49;
break;
case 51:return 31;
break;
case 52:return 28;
break;
case 53:return 30;
break;
case 54:return 45;
break;
case 55:return "R_DEFINE";
break;
case 56:return "R_AS";
break;
case 57:return "R_STRC";
break;
case 58:return "R_TRY";
break;
case 59:return "R_CATCH";
break;
case 60:return "R_THROW";
break;
case 61:return 86;
break;
case 62:return 86;
break;
case 63:return 85;
break;
case 64:return 84;
break;
case 65: strBuffer = ""; this.begin('STRING'); 
break;
case 66: this.begin('CHAR'); 
break;
case 67:return 13;
break;
case 68:return 15;
break;
case 69: console.log("STRING: " + strBuffer); this.popState(); yy_.yytext = strBuffer; return 88; 
break;
case 70: strBuffer += "\""; 
break;
case 71: strBuffer += "\\"; 
break;
case 72: strBuffer += "\n"; 
break;
case 73: strBuffer += "\r"; 
break;
case 74: strBuffer += "\t"; 
break;
case 75: strBuffer += yy_.yytext; 
break;
case 76: console.log("unclosed String"); 
break;
case 77: yy_.yytext = "'"; this.popState(); return 87; 
break;
case 78: yy_.yytext = "\\"; this.popState(); return 87; 
break;
case 79: yy_.yytext = "\n"; this.popState(); return 87; 
break;
case 80: yy_.yytext = "\t"; this.popState(); return 87; 
break;
case 81: yy_.yytext = "\t"; this.popState(); return 87; 
break;
case 82: yy_.yytext = "\0"; this.popState(); return 87; 
break;
case 83: yy_.yytext = yy_.yytext.slice(0, -1);  this.popState(); return 87; 
break;
case 84: yy_.yytext = "\0"; this.popState(); return 87; 
break;
case 85: console.log("invalid Char... skipping"); this.popState(); 
break;
case 86:return 5;
break;
case 87: console.error('Error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\.)/i,/^(?:;)/i,/^(?:,)/i,/^(?::=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\^\^)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:===)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\^)/i,/^(?:!)/i,/^(?:null\b)/i,/^(?:integer\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:import\b)/i,/^(?:var\b)/i,/^(?:const\b)/i,/^(?:global\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:continue\b)/i,/^(?:break\b)/i,/^(?:return\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:void\b)/i,/^(?:define\b)/i,/^(?:as\b)/i,/^(?:strc\b)/i,/^(?:try\b)/i,/^(?:catch\b)/i,/^(?:throw\b)/i,/^(?:false\b)/i,/^(?:true\b)/i,/^(?:[0-9]+(\.[0-9]+)?)/i,/^(?:[0-9]+)/i,/^(?:")/i,/^(?:')/i,/^(?:([a-zA-Z])[a-zA-ZñÑ0-9_]*\.js\b)/i,/^(?:([a-zA-Z])[a-zA-ZñÑ0-9_]*)/i,/^(?:")/i,/^(?:\\")/i,/^(?:\\\\)/i,/^(?:\\n)/i,/^(?:\\r)/i,/^(?:\\t)/i,/^(?:.)/i,/^(?:$)/i,/^(?:\\'')/i,/^(?:\\\\')/i,/^(?:\\n')/i,/^(?:\\r')/i,/^(?:\\t')/i,/^(?:\\0')/i,/^(?:[^']')/i,/^(?:')/i,/^(?:.)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"CHAR":{"rules":[77,78,79,80,81,82,83,84,85],"inclusive":false},"STRING":{"rules":[69,70,71,72,73,74,75,76],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,86,87],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}