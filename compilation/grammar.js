/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,15],$V2=[1,11],$V3=[1,10],$V4=[1,12],$V5=[1,13],$V6=[1,14],$V7=[1,17],$V8=[1,18],$V9=[1,19],$Va=[1,20],$Vb=[1,21],$Vc=[2,5,8,13,14,28,45,47,48,50,51,52,53,54],$Vd=[2,5,7,8,13,14,28,45,47,48,50,51,52,53,54],$Ve=[1,33],$Vf=[14,16,24],$Vg=[2,5,7,8,13,14,19,28,45,47,48,50,51,52,53,54],$Vh=[2,46],$Vi=[1,43],$Vj=[2,47],$Vk=[1,47],$Vl=[19,24],$Vm=[2,23],$Vn=[1,58],$Vo=[1,60],$Vp=[1,66],$Vq=[1,65],$Vr=[1,69],$Vs=[1,70],$Vt=[1,77],$Vu=[1,78],$Vv=[1,71],$Vw=[1,72],$Vx=[1,73],$Vy=[1,74],$Vz=[1,75],$VA=[1,76],$VB=[1,88],$VC=[1,90],$VD=[2,5,7,8,13,14,18,19,22,24,25,27,28,33,35,36,39,41,42,45,47,48,50,51,52,53,54,55,56,57,58,62,64,75,76,79,95,96,97,98,99,100,101],$VE=[1,110],$VF=[1,91],$VG=[1,92],$VH=[1,94],$VI=[1,96],$VJ=[1,97],$VK=[1,98],$VL=[1,99],$VM=[1,100],$VN=[1,101],$VO=[1,102],$VP=[1,103],$VQ=[1,104],$VR=[1,105],$VS=[1,106],$VT=[1,107],$VU=[1,108],$VV=[1,109],$VW=[2,5,7,8,13,14,16,18,19,22,24,25,27,28,33,35,36,39,41,42,44,45,47,48,50,51,52,53,54,55,56,57,58,62,63,64,72,74,75,76,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101],$VX=[2,83],$VY=[1,111],$VZ=[1,112],$V_=[19,27],$V$=[2,81],$V01=[2,7,13,14,18,19,22,24,25,27,33,35,36,39,41,42,45,47,48,50,51,52,53,54,55,56,57,58,62,64,75,76,79,95,96,97,98,99,100,101],$V11=[1,153],$V21=[2,80],$V31=[1,93],$V41=[1,95],$V51=[2,5,7,8,13,14,18,19,24,25,27,28,33,35,36,39,41,42,44,45,47,48,50,51,52,53,54,55,56,57,58,62,63,64,72,75,76,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101],$V61=[18,19],$V71=[2,13,14,22,25,27,33,35,36,39,41,42,45,47,48,50,51,52,53,54,55,56,57,58,75,76,79,95,96,97,98,99,100,101],$V81=[2,26],$V91=[1,169],$Va1=[2,5,7,8,13,14,18,19,24,25,27,28,33,35,36,39,41,42,44,45,47,48,50,51,52,53,54,55,56,57,58,62,63,64,72,75,76,79,80,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101],$Vb1=[2,5,7,8,13,14,18,19,24,25,27,28,33,35,36,39,41,42,44,45,47,48,50,51,52,53,54,55,56,57,58,62,63,64,72,75,76,79,80,81,82,83,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101],$Vc1=[2,5,7,8,13,14,18,19,24,25,27,28,33,35,36,39,41,42,44,45,47,48,50,51,52,53,54,55,56,57,58,62,63,64,72,75,76,85,86,87,92,93,94,95,96,97,98,99,100,101],$Vd1=[2,5,7,8,13,14,18,19,24,25,27,28,33,35,36,39,41,42,44,45,47,48,50,51,52,53,54,55,56,57,58,62,63,64,72,75,76,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101],$Ve1=[1,182],$Vf1=[1,195],$Vg1=[1,188],$Vh1=[1,189],$Vi1=[1,190],$Vj1=[1,191],$Vk1=[1,192],$Vl1=[1,193],$Vm1=[1,196],$Vn1=[1,197],$Vo1=[1,198],$Vp1=[1,199],$Vq1=[2,13,14,22,25,27,33,35,36,39,41,42,45,47,48,50,51,52,53,54,55,56,57,58,62,64,75,76,79,95,96,97,98,99,100,101],$Vr1=[2,7,13,14,22,25,27,33,35,36,39,41,42,45,47,48,50,51,52,53,54,55,56,57,58,62,64,75,76,79,95,96,97,98,99,100,101],$Vs1=[2,62],$Vt1=[1,253],$Vu1=[1,254],$Vv1=[27,62,64];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"l_global":4,"EOF":5,"global":6,"SEMICOLON":7,"R_IMPORT":8,"import_list":9,"funcDeclar":10,"varDeclar":11,"defineStruct":12,"R_DEFINE":13,"ID":14,"R_AS":15,"BRACKET_L":16,"l_declar":17,"BRACKET_R":18,"COMMA":19,"FILENAME":20,"type":21,"PAR_L":22,"l_param":23,"PAR_R":24,"BRACE_L":25,"l_statement":26,"BRACE_R":27,"R_PUBLIC":28,"statement":29,"varAssign":30,"jump":31,"if":32,"R_WHILE":33,"exp":34,"R_DO":35,"R_FOR":36,"for_init":37,"for_update":38,"R_SWITCH":39,"l_case":40,"R_THROW":41,"R_TRY":42,"R_CATCH":43,"EQUAL":44,"R_VAR":45,"COLONEQUAL":46,"R_CONST":47,"R_GLOBAL":48,"primType":49,"R_VOID":50,"R_INTEGER":51,"R_DOUBLE":52,"R_CHAR":53,"R_BOOLEAN":54,"R_CONTINUE":55,"R_BREAK":56,"R_RETURN":57,"R_IF":58,"if_else":59,"R_ELSE":60,"case":61,"R_CASE":62,"COLON":63,"R_DEFAULT":64,"call":65,"l_exp":66,"l_assign":67,"access":68,"atomic":69,"exp_arithmetic":70,"exp_logic":71,"TERNARY":72,"update":73,"DOT":74,"R_STRC":75,"DOLLAR":76,"PLUSPLUS":77,"MINUSMINUS":78,"MINUS":79,"PLUS":80,"TIMES":81,"DIVIDE":82,"MODULE":83,"POW":84,"EQUALEQUALEQUAL":85,"EQUALEQUAL":86,"NOTEQUAL":87,"LESS":88,"LESSEQUAL":89,"GREATER":90,"GREATEREQUAL":91,"AND":92,"OR":93,"XOR":94,"NOT":95,"LITERAL_INT":96,"LITERAL_DOUBLE":97,"LITERAL_BOOLEAN":98,"LITERAL_CHAR":99,"LITERAL_STRING":100,"R_NULL":101,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"SEMICOLON",8:"R_IMPORT",13:"R_DEFINE",14:"ID",15:"R_AS",16:"BRACKET_L",18:"BRACKET_R",19:"COMMA",20:"FILENAME",22:"PAR_L",24:"PAR_R",25:"BRACE_L",27:"BRACE_R",28:"R_PUBLIC",33:"R_WHILE",35:"R_DO",36:"R_FOR",39:"R_SWITCH",41:"R_THROW",42:"R_TRY",43:"R_CATCH",44:"EQUAL",45:"R_VAR",46:"COLONEQUAL",47:"R_CONST",48:"R_GLOBAL",50:"R_VOID",51:"R_INTEGER",52:"R_DOUBLE",53:"R_CHAR",54:"R_BOOLEAN",55:"R_CONTINUE",56:"R_BREAK",57:"R_RETURN",58:"R_IF",60:"R_ELSE",62:"R_CASE",63:"COLON",64:"R_DEFAULT",72:"TERNARY",74:"DOT",75:"R_STRC",76:"DOLLAR",77:"PLUSPLUS",78:"MINUSMINUS",79:"MINUS",80:"PLUS",81:"TIMES",82:"DIVIDE",83:"MODULE",84:"POW",85:"EQUALEQUALEQUAL",86:"EQUALEQUAL",87:"NOTEQUAL",88:"LESS",89:"LESSEQUAL",90:"GREATER",91:"GREATEREQUAL",92:"AND",93:"OR",94:"XOR",95:"NOT",96:"LITERAL_INT",97:"LITERAL_DOUBLE",98:"LITERAL_BOOLEAN",99:"LITERAL_CHAR",100:"LITERAL_STRING",101:"R_NULL"},
productions_: [0,[3,2],[4,2],[4,1],[4,3],[4,2],[4,2],[4,3],[6,2],[6,1],[6,1],[6,1],[12,6],[17,3],[17,1],[9,3],[9,1],[10,8],[10,9],[10,8],[10,9],[23,3],[23,1],[23,0],[26,2],[26,3],[26,0],[26,3],[29,1],[29,1],[29,1],[29,1],[29,1],[29,7],[29,8],[29,11],[29,10],[29,7],[29,2],[29,12],[29,2],[11,4],[11,4],[11,4],[11,4],[11,4],[11,2],[11,2],[30,3],[21,1],[21,3],[21,1],[21,3],[49,1],[49,1],[49,1],[49,1],[37,1],[37,1],[37,0],[38,1],[38,1],[38,0],[31,1],[31,1],[31,2],[31,3],[32,7],[32,8],[59,2],[59,4],[40,2],[40,1],[61,4],[61,3],[65,4],[65,4],[67,3],[67,1],[66,3],[66,1],[66,0],[68,4],[34,1],[34,1],[34,1],[34,1],[34,1],[34,3],[34,5],[34,3],[34,1],[34,1],[34,3],[34,4],[34,5],[34,5],[34,4],[34,2],[73,2],[73,2],[70,2],[70,3],[70,3],[70,3],[70,3],[70,3],[70,3],[71,3],[71,3],[71,3],[71,3],[71,3],[71,3],[71,3],[71,3],[71,3],[71,3],[71,2],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 var result = {ast:$$[$0-1], errores:_errores}; _errores = []; return result; 
break;
case 2: case 24: case 71:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 16: case 22: case 72: case 80:
 this.$ = [$$[$0]]; 
break;
case 4: case 25:
 $$[$0-2].push($$[$0-1]); this.$ = $$[$0-2]; 
break;
case 5:
 this.$ = [$$[$0-1]]; 
break;
case 6: case 23: case 26: case 81:
 this.$ = []; 
break;
case 7: case 27:
 /*nothing*/ 
break;
case 8:
 this.$ = {type: TYPE_OP.IMPORT, imports: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 9: case 10: case 11: case 28: case 29: case 30: case 31: case 32: case 57: case 58: case 60: case 61: case 69: case 84: case 85: case 86: case 87: case 91: case 92:
 this.$ = $$[$0]; 
break;
case 12:
 this.$ = { type: TYPE_OP.DEFINE_STRC, id: $$[$0-4].toUpperCase(), l_declar: $$[$0-1], line: this._$.first_line, column: this._$.first_column}; 
break;
case 13:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]
break;
case 14: case 78:
 this.$ = [$$[$0]] 
break;
case 15: case 21: case 79:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 17: case 18:
 this.$ = {type: TYPE_OP.FUNC_DEF, returnType: $$[$0-7], name: $$[$0-6].toUpperCase(), params: $$[$0-4], block: $$[$0-1], line: this._$.first_line, column: this._$.first_column}; 
break;
case 19: case 20:
 this.$ = {type: TYPE_OP.FUNC_DEF, returnType: $$[$0-7].toUpperCase(), name: $$[$0-6].toUpperCase(), params: $$[$0-4], block: $$[$0-1], line: this._$.first_line, column: this._$.first_column}; 
break;
case 33:
 this.$ = {type: TYPE_OP.WHILE, cond: $$[$0-4], block: $$[$0-1], line: this._$.first_line, column: this._$.first_column}; 
break;
case 34:
 this.$ = {type: TYPE_OP.DO_WHILE, block: $$[$0-5], cond: $$[$0-1], line: this._$.first_line, column: this._$.first_column}; 
break;
case 35:
 this.$ = {type: TYPE_OP.FOR, init: $$[$0-8], cond: $$[$0-6], update: $$[$0-4], block: $$[$0-1], line: this._$.first_line, column: this._$.first_column}; 
break;
case 36:
 this.$ = {type: TYPE_OP.FOR, init: $$[$0-7], cond: null, update: $$[$0-4], block: $$[$0-1], line: this._$.first_line, column: this._$.first_column}; 
break;
case 37:
 this.$ = {type: TYPE_OP.SWITCH, switch: $$[$0-4], cases: $$[$0-1], line: this._$.first_line, column: this._$.first_column}; 
break;
case 38:
 this.$ = { type: TYPE_OP.THROW, exp: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 39:
 this.$ = {type: TYPE_OP.TRY, tryBlock: $$[$0-9], exceptionType: $$[$0-5], catchBlock: $$[$0-1], line: this._$.first_line, column: this._$.first_column}; 
break;
case 40:
 this.$ = $$[$0-1] 
break;
case 41:
 this.$ = {type: TYPE_OP.DECLAR, jType: $$[$0-3], id: $$[$0-2].toUpperCase(), exp: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 42: case 43: case 44:
 this.$ = {type: TYPE_OP.DECLAR, jType: $$[$0-3].toUpperCase(), id: $$[$0-2].toUpperCase(), exp: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 45:
 this.$ = {type: TYPE_OP.DECLAR, jType: $$[$0-3].toUpperCase(), id: $$[$0-2].toUpperCase(), exp: $$[$0], line: this._$.first_line, column: this._$.first_column, global: true}; 
break;
case 46:
 this.$ = {type: TYPE_OP.DECLAR, jType: $$[$0-1], id: $$[$0].toUpperCase(), exp: null, line: this._$.first_line, column: this._$.first_column}; 
break;
case 47:
 this.$ = {type: TYPE_OP.DECLAR, jType: $$[$0-1].toUpperCase(), id: $$[$0].toUpperCase(), exp: null, line: this._$.first_line, column: this._$.first_column}; 
break;
case 48:
 this.$ = {type: TYPE_OP.ASSIGN, id:$$[$0-2], exp: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 49:
 this.$ = $$[$0] 
break;
case 50:
 this.$ = $$[$0-2] + "[]"
break;
case 51:
 this.$ = TYPE_VAL.VOID 
break;
case 52:
 this.$ = $$[$0-2].toUpperCase()  + "[]"
break;
case 53:
 this.$ = TYPE_VAL.INTEGER 
break;
case 54:
 this.$ = TYPE_VAL.DOUBLE 
break;
case 55:
 this.$ = TYPE_VAL.CHAR 
break;
case 56:
 this.$ = TYPE_VAL.BOOLEAN 
break;
case 59: case 62:
 this.$ = null; 
break;
case 63:
 this.$ = {type: TYPE_OP.CONTINUE, line: this._$.first_line, column: this._$.first_column}; 
break;
case 64:
 this.$ = {type: TYPE_OP.BREAK, line: this._$.first_line, column: this._$.first_column}; 
break;
case 65:
 this.$ = {type: TYPE_OP.RETURN, exp: null, line: this._$.first_line, column: this._$.first_column}; 
break;
case 66:
 this.$ = {type: TYPE_OP.RETURN, exp: $$[$0-1], line: this._$.first_line, column: this._$.first_column}; 
break;
case 67:
 this.$ = {type: TYPE_OP.IF, cond: $$[$0-4], ifTrue: $$[$0-1], ifFalse: null, line: this._$.first_line, column: this._$.first_column}; 
break;
case 68:
 this.$ = {type: TYPE_OP.IF, cond: $$[$0-5], ifTrue: $$[$0-2], ifFalse: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 70:
 this.$ = {type: TYPE_OP.IF, cond: null, ifTrue: $$[$0-1], ifFalse: null, line: this._$.first_line, column: this._$.first_column}; 
break;
case 73:
 this.$ = {type: TYPE_OP.CASE, cond: $$[$0-2], ifTrue: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 74:
 this.$ = {type: TYPE_OP.CASE, cond: null, ifTrue: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 75:
 this.$ = {type:TYPE_OP.CALL, call: $$[$0-3], params: $$[$0-1], line: this._$.first_line, column: this._$.first_column}; 
break;
case 76:
 this.$ = {type:TYPE_OP.CALL_JS, call: $$[$0-3], params: $$[$0-1], line: this._$.first_line, column: this._$.first_column}; 
break;
case 77:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2] 
break;
case 82:
 this.$ = {type: TYPE_OP.ACCESS, base: $$[$0-3], index: $$[$0-1], line: this._$.first_line, column: this._$.first_column}; 
break;
case 83:
 this.$ = { type: TYPE_OP.ID, val:$$[$0].toUpperCase(), line: this._$.first_line, column: this._$.first_column}; 
break;
case 88:
 this.$ = {type: TYPE_OP.ARRAY_DEF, val: $$[$0-1], line: this._$.first_line, column: this._$.first_column}; 
break;
case 89:
 this.$ = {type: TYPE_OP.TERNARY, cond: $$[$0-4], ifTrue: $$[$0-2], ifFalse: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 90:
 this.$ = $$[$0-1]; 
break;
case 93:
 this.$ = {type: TYPE_OP.DOT, base: $$[$0-2], next: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 94:
 this.$ = { type: TYPE_OP.CAST, endType: $$[$0-2], exp: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 95:
 this.$ = { type: TYPE_OP.STRC, jType: $$[$0-3].toUpperCase() + "[]", exp: $$[$0-1], line: this._$.first_line, column: this._$.first_column}; 
break;
case 96:
 this.$ = { type: TYPE_OP.STRC, jType: $$[$0-3] + "[]", exp: $$[$0-1], line: this._$.first_line, column: this._$.first_column}; 
break;
case 97:
 this.$ = { type: TYPE_OP.STRC, jType: $$[$0-2].toUpperCase(), exp: null, line: this._$.first_line, column: this._$.first_column}; 
break;
case 98:
 this.$ = {type: TYPE_OP.DOLLAR, exp: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 99:
 this.$ = {type: TYPE_OP.PLUSPLUS, op1: { type: TYPE_OP.ID, val:$$[$0-1].toUpperCase(), line: this._$.first_line, column: this._$.first_column}, line: this._$.first_line, column: this._$.first_column}; 
break;
case 100:
 this.$ = {type: TYPE_OP.MINUSMINUS, op1: { type: TYPE_OP.ID, val:$$[$0-1].toUpperCase(), line: this._$.first_line, column: this._$.first_column}, line: this._$.first_line, column: this._$.first_column}; 
break;
case 101:
 this.$ = {type: TYPE_OP.UMINUS, op1: $$[$0], op: $$[$0-1], line: this._$.first_line, column: this._$.first_column}; 
break;
case 102:
 this.$ = {type: TYPE_OP.PLUS, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 103:
 this.$ = {type: TYPE_OP.MINUS, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 104:
 this.$ = {type: TYPE_OP.TIMES, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 105:
 this.$ = {type: TYPE_OP.DIVIDE, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 106:
 this.$ = {type: TYPE_OP.MODULE, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 107:
 this.$ = {type: TYPE_OP.POW, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 108:
 this.$ = {type: TYPE_OP.EQUALEQUALEQUAL, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 109:
 this.$ = {type: TYPE_OP.EQUALEQUAL, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 110:
 this.$ = {type: TYPE_OP.NOTEQUAL, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 111:
 this.$ = {type: TYPE_OP.LESS, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 112:
 this.$ = {type: TYPE_OP.LESSEQUAL, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 113:
 this.$ = {type: TYPE_OP.GREATER, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 114:
 this.$ = {type: TYPE_OP.GREATEREQUAL, op1: $$[$0-2], op: $$[$0-1], op2: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 115:
 this.$ = {type: TYPE_OP.AND, op1: $$[$0-2], op:$$[$0-1], op2: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 116:
 this.$ = {type: TYPE_OP.OR, op1: $$[$0-2], op:$$[$0-1], op2: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 117:
 this.$ = {type: TYPE_OP.XOR, op1: $$[$0-2], op:$$[$0-1], op2: $$[$0], line: this._$.first_line, column: this._$.first_column}; 
break;
case 118:
 this.$ = {type: TYPE_OP.NOT, op1: $$[$0], op: $$[$0-1], line: this._$.first_line, column: this._$.first_column}; 
break;
case 119:
 this.$ = AST_API.newVal(TYPE_VAL.INTEGER, Number($$[$0]), this._$.first_line, this._$.first_column);
break;
case 120:
 this.$ = AST_API.newVal(TYPE_VAL.DOUBLE, Number($$[$0]), this._$.first_line, this._$.first_column);
break;
case 121:
 this.$ = AST_API.newVal(TYPE_VAL.BOOLEAN, $$[$0].toUpperCase() == "TRUE" ? 1 : 0, this._$.first_line, this._$.first_column); 
break;
case 122:
 this.$ = AST_API.newVal(TYPE_VAL.CHAR, $$[$0].charCodeAt(0), this._$.first_line, this._$.first_column); 
break;
case 123:
 this.$ = AST_API.newVal(TYPE_VAL.STRING, $$[$0], this._$.first_line, this._$.first_column); 
break;
case 124:
 this.$ = AST_API.newVal(TYPE_VAL.NULL, -1, this._$.first_line, this._$.first_column); 
break;
}
},
table: [{2:[1,4],3:1,4:2,6:3,8:$V0,10:6,11:7,12:8,13:$V1,14:$V2,21:9,28:$V3,45:$V4,47:$V5,48:$V6,49:16,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb},{1:[3]},{2:[1,24],5:[1,22],6:23,8:$V0,10:6,11:7,12:8,13:$V1,14:$V2,21:9,28:$V3,45:$V4,47:$V5,48:$V6,49:16,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb},o($Vc,[2,3],{7:[1,25]}),{7:[1,26]},{9:27,20:[1,28]},o($Vd,[2,9]),o($Vd,[2,10]),o($Vd,[2,11]),{14:[1,29]},{14:[1,31],21:30,49:16,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb},{14:[1,32],16:$Ve},{14:[1,34]},{14:[1,35]},{14:[1,36]},{14:[1,37]},{14:[2,49],16:[1,38]},{14:[2,51]},o($Vf,[2,53]),o($Vf,[2,54]),o($Vf,[2,55]),o($Vf,[2,56]),{1:[2,1]},o($Vc,[2,2],{7:[1,39]}),{7:[1,40]},o($Vc,[2,5]),o($Vc,[2,6]),o($Vd,[2,8],{19:[1,41]}),o($Vg,[2,16]),o($Vd,$Vh,{22:[1,42],44:$Vi}),{14:[1,44]},{14:[1,45],16:$Ve},o($Vd,$Vj,{22:[1,46],44:$Vk}),{18:[1,48]},{46:[1,49]},{46:[1,50]},{46:[1,51]},{15:[1,52]},{18:[1,53]},o($Vc,[2,4]),o($Vc,[2,7]),{20:[1,54]},o($Vl,$Vm,{49:16,23:55,11:56,21:57,14:$Vn,45:$V4,47:$V5,48:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb}),{14:$Vo,22:$Vp,25:$Vq,34:59,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{22:[1,79]},{22:[1,80]},o($Vl,$Vm,{49:16,11:56,21:57,23:81,14:$Vn,45:$V4,47:$V5,48:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb}),{14:$Vo,22:$Vp,25:$Vq,34:82,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{14:[2,52]},{14:$Vo,22:$Vp,25:$Vq,34:83,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{14:$Vo,22:$Vp,25:$Vq,34:84,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{14:$Vo,22:$Vp,25:$Vq,34:85,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{16:[1,86]},{14:[2,50]},o($Vg,[2,15]),{19:$VB,24:[1,87]},o($Vl,[2,22]),{14:[1,89]},{14:$VC,16:$Ve},o($VD,[2,41],{16:$VE,72:$VF,74:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV}),o($VW,$VX,{77:$VY,78:$VZ}),o($VW,[2,84]),o($VW,[2,85]),o($VW,[2,86]),o($VW,[2,87]),o($V_,$V$,{69:61,65:62,70:63,71:64,68:67,73:68,66:113,34:114,14:$Vo,22:$Vp,25:$Vq,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA}),{14:$Vo,22:$Vp,25:$Vq,34:115,49:116,51:$V8,52:$V9,53:$Va,54:$Vb,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},o($VW,[2,91]),o($VW,[2,92]),{14:[1,117],49:118,51:$V8,52:$V9,53:$Va,54:$Vb},{14:$Vo,22:$Vp,25:$Vq,34:119,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},o($VW,[2,119]),o($VW,[2,120]),o($VW,[2,121]),o($VW,[2,122]),o($VW,[2,123]),o($VW,[2,124]),{14:$Vo,22:$Vp,25:$Vq,34:120,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{14:$Vo,22:$Vp,25:$Vq,34:121,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},o($Vl,$Vm,{49:16,11:56,21:57,23:122,14:$Vn,45:$V4,47:$V5,48:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb}),o($Vl,$Vm,{49:16,11:56,21:57,23:123,14:$Vn,45:$V4,47:$V5,48:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb}),{19:$VB,24:[1,124]},o($VD,[2,42],{16:$VE,72:$VF,74:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV}),o($VD,[2,43],{16:$VE,72:$VF,74:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV}),o($VD,[2,44],{16:$VE,72:$VF,74:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV}),o($VD,[2,45],{16:$VE,72:$VF,74:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV}),{11:126,14:$Vn,17:125,21:57,45:$V4,47:$V5,48:$V6,49:16,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb},{25:[1,127]},{11:128,14:$Vn,21:57,45:$V4,47:$V5,48:$V6,49:16,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb},o($V01,$Vh,{44:$Vi}),o($V01,$Vj,{44:$Vk}),{14:$Vo,22:$Vp,25:$Vq,34:129,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{14:$Vo,22:$Vp,25:$Vq,34:130,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},o($Vl,$V$,{69:61,65:62,70:63,71:64,68:67,73:68,66:131,67:132,34:133,30:134,14:$Vo,22:$Vp,25:$Vq,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA}),{14:$Vo,22:$Vp,25:$Vq,34:135,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{14:$Vo,22:$Vp,25:$Vq,34:136,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{14:$Vo,22:$Vp,25:$Vq,34:137,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{14:$Vo,22:$Vp,25:$Vq,34:138,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{14:$Vo,22:$Vp,25:$Vq,34:139,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{14:$Vo,22:$Vp,25:$Vq,34:140,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{14:$Vo,22:$Vp,25:$Vq,34:141,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{14:$Vo,22:$Vp,25:$Vq,34:142,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{14:$Vo,22:$Vp,25:$Vq,34:143,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{14:$Vo,22:$Vp,25:$Vq,34:144,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{14:$Vo,22:$Vp,25:$Vq,34:145,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{14:$Vo,22:$Vp,25:$Vq,34:146,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{14:$Vo,22:$Vp,25:$Vq,34:147,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{14:$Vo,22:$Vp,25:$Vq,34:148,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{14:$Vo,22:$Vp,25:$Vq,34:149,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{14:$Vo,22:$Vp,25:$Vq,34:150,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{14:$Vo,22:$Vp,25:$Vq,34:151,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},o($VW,[2,99]),o($VW,[2,100]),{19:$V11,27:[1,152]},o($V_,$V21,{16:$VE,22:$V31,72:$VF,74:$VG,79:$V41,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV}),{16:$VE,22:$V31,24:[1,154],72:$VF,74:$VG,79:$V41,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV},{24:[1,155]},{16:[1,156],22:[1,157]},{16:[1,158]},o($V51,[2,98],{16:$VE,22:$V31,74:$VG}),o($V51,[2,101],{16:$VE,22:$V31,74:$VG}),o($V51,[2,118],{16:$VE,22:$V31,74:$VG}),{19:$VB,24:[1,159]},{19:$VB,24:[1,160]},{25:[1,161]},{18:[1,162],19:[1,163]},o($V61,[2,14]),o($V71,$V81,{26:164}),o($Vl,[2,21]),{16:$VE,22:$V31,63:[1,165],72:$VF,74:$VG,79:$V41,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV},o($VW,[2,93]),{19:$V11,24:[1,166]},{19:[1,168],24:[1,167]},o($Vl,$V21,{16:$VE,22:$V31,44:$V91,72:$VF,74:$VG,79:$V41,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV}),o($Vl,[2,78]),o($Va1,[2,102],{16:$VE,22:$V31,74:$VG,81:$VI,82:$VJ,83:$VK,84:$VL}),o($Va1,[2,103],{16:$VE,22:$V31,74:$VG,81:$VI,82:$VJ,83:$VK,84:$VL}),o($Vb1,[2,104],{16:$VE,22:$V31,74:$VG,84:$VL}),o($Vb1,[2,105],{16:$VE,22:$V31,74:$VG,84:$VL}),o($Vb1,[2,106],{16:$VE,22:$V31,74:$VG,84:$VL}),o($Vb1,[2,107],{16:$VE,22:$V31,74:$VG,84:$VL}),o($Vc1,[2,108],{16:$VE,22:$V31,74:$VG,79:$V41,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,88:$VP,89:$VQ,90:$VR,91:$VS}),o($Vc1,[2,109],{16:$VE,22:$V31,74:$VG,79:$V41,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,88:$VP,89:$VQ,90:$VR,91:$VS}),o($Vc1,[2,110],{16:$VE,22:$V31,74:$VG,79:$V41,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,88:$VP,89:$VQ,90:$VR,91:$VS}),o($Vd1,[2,111],{16:$VE,22:$V31,74:$VG,79:$V41,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL}),o($Vd1,[2,112],{16:$VE,22:$V31,74:$VG,79:$V41,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL}),o($Vd1,[2,113],{16:$VE,22:$V31,74:$VG,79:$V41,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL}),o($Vd1,[2,114],{16:$VE,22:$V31,74:$VG,79:$V41,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL}),o([2,5,7,8,13,14,18,19,24,25,27,28,33,35,36,39,41,42,44,45,47,48,50,51,52,53,54,55,56,57,58,62,63,64,72,75,76,92,93,94,95,96,97,98,99,100,101],[2,115],{16:$VE,22:$V31,74:$VG,79:$V41,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS}),o([2,5,7,8,13,14,18,19,24,25,27,28,33,35,36,39,41,42,44,45,47,48,50,51,52,53,54,55,56,57,58,62,63,64,72,75,76,93,94,95,96,97,98,99,100,101],[2,116],{16:$VE,22:$V31,74:$VG,79:$V41,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT}),o([2,5,7,8,13,14,18,19,24,25,27,28,33,35,36,39,41,42,44,45,47,48,50,51,52,53,54,55,56,57,58,62,63,64,72,75,76,94,95,96,97,98,99,100,101],[2,117],{16:$VE,22:$V31,74:$VG,79:$V41,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU}),{16:$VE,18:[1,170],22:$V31,72:$VF,74:$VG,79:$V41,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV},o($VW,[2,88]),{14:$Vo,22:$Vp,25:$Vq,34:171,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},o($VW,[2,90]),{14:$Vo,22:$Vp,25:$Vq,34:172,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{14:$Vo,22:$Vp,25:$Vq,34:173,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{24:[1,174]},{14:$Vo,22:$Vp,25:$Vq,34:175,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{25:[1,176]},{25:[1,177]},o($V71,$V81,{26:178}),o([2,5,7,8,13,14,22,25,27,28,33,35,36,39,41,42,45,47,48,50,51,52,53,54,55,56,57,58,62,64,75,76,79,95,96,97,98,99,100,101],[2,12]),{11:179,14:$Vn,21:57,45:$V4,47:$V5,48:$V6,49:16,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb},{2:$Ve1,11:183,12:186,13:$V1,14:$Vf1,21:57,22:$Vp,25:$Vq,27:[1,180],29:181,30:184,31:185,32:187,33:$Vg1,34:194,35:$Vh1,36:$Vi1,39:$Vj1,41:$Vk1,42:$Vl1,45:$V4,47:$V5,48:$V6,49:16,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vm1,56:$Vn1,57:$Vo1,58:$Vp1,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{14:$Vo,22:$Vp,25:$Vq,34:200,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},o($VW,[2,75]),o($VW,[2,76]),{14:$Vo,22:$Vp,25:$Vq,30:201,34:202,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{14:$Vo,22:$Vp,25:$Vq,34:203,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},o($VW,[2,82]),o([19,24,27],[2,79],{16:$VE,22:$V31,72:$VF,74:$VG,79:$V41,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV}),o([2,5,7,8,13,14,16,18,19,22,24,25,27,28,33,35,36,39,41,42,44,45,47,48,50,51,52,53,54,55,56,57,58,62,63,64,72,75,76,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101],[2,94],{74:$VG}),{16:$VE,18:[1,204],22:$V31,72:$VF,74:$VG,79:$V41,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV},o($VW,[2,97]),{16:$VE,18:[1,205],22:$V31,72:$VF,74:$VG,79:$V41,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV},o($V71,$V81,{26:206}),o($V71,$V81,{26:207}),{2:$Ve1,11:183,12:186,13:$V1,14:$Vf1,21:57,22:$Vp,25:$Vq,27:[1,208],29:181,30:184,31:185,32:187,33:$Vg1,34:194,35:$Vh1,36:$Vi1,39:$Vj1,41:$Vk1,42:$Vl1,45:$V4,47:$V5,48:$V6,49:16,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vm1,56:$Vn1,57:$Vo1,58:$Vp1,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},o($V61,[2,13]),o($Vd,[2,17]),o($Vq1,[2,24],{7:[1,209]}),{7:[1,210]},o($Vr1,[2,28]),o($Vr1,[2,29]),o($Vr1,[2,30]),o($Vr1,[2,31]),o($Vr1,[2,32]),{22:[1,211]},{25:[1,212]},{22:[1,213]},{22:[1,214]},{14:$Vo,22:$Vp,25:$Vq,34:215,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{25:[1,216]},{7:[1,217],16:$VE,22:$V31,44:$V91,72:$VF,74:$VG,79:$V41,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV},o([7,16,22,44,72,74,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94],$VX,{14:$VC,77:$VY,78:$VZ}),o($Vr1,[2,63]),o($Vr1,[2,64]),{7:[1,218],14:$Vo,22:$Vp,25:$Vq,34:219,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{22:[1,220]},o([2,5,7,8,13,14,18,19,24,25,27,28,33,35,36,39,41,42,44,45,47,48,50,51,52,53,54,55,56,57,58,62,63,64,75,76,95,96,97,98,99,100,101],[2,89],{16:$VE,22:$V31,72:$VF,74:$VG,79:$V41,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV}),o($Vl,[2,77]),{16:$VE,22:$V31,44:$V91,72:$VF,74:$VG,79:$V41,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV},o([2,7,13,14,19,24,25,27,33,35,36,39,41,42,45,47,48,50,51,52,53,54,55,56,57,58,62,64,75,76,95,96,97,98,99,100,101],[2,48],{16:$VE,22:$V31,72:$VF,74:$VG,79:$V41,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV}),o($VW,[2,95]),o($VW,[2,96]),{2:$Ve1,11:183,12:186,13:$V1,14:$Vf1,21:57,22:$Vp,25:$Vq,27:[1,221],29:181,30:184,31:185,32:187,33:$Vg1,34:194,35:$Vh1,36:$Vi1,39:$Vj1,41:$Vk1,42:$Vl1,45:$V4,47:$V5,48:$V6,49:16,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vm1,56:$Vn1,57:$Vo1,58:$Vp1,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{2:$Ve1,11:183,12:186,13:$V1,14:$Vf1,21:57,22:$Vp,25:$Vq,27:[1,222],29:181,30:184,31:185,32:187,33:$Vg1,34:194,35:$Vh1,36:$Vi1,39:$Vj1,41:$Vk1,42:$Vl1,45:$V4,47:$V5,48:$V6,49:16,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vm1,56:$Vn1,57:$Vo1,58:$Vp1,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},o($Vd,[2,19]),o($Vq1,[2,25]),o($Vq1,[2,27]),{14:$Vo,22:$Vp,25:$Vq,34:223,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},o($V71,$V81,{26:224}),{7:[2,59],11:226,14:$Vf1,21:57,22:$Vp,25:$Vq,30:227,34:202,37:225,45:$V4,47:$V5,48:$V6,49:16,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{14:$Vo,22:$Vp,25:$Vq,34:228,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},o([2,7,13,14,25,27,33,35,36,39,41,42,45,47,48,50,51,52,53,54,55,56,57,58,62,64,75,76,95,96,97,98,99,100,101],[2,38],{16:$VE,22:$V31,72:$VF,74:$VG,79:$V41,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV}),o($V71,$V81,{26:229}),o($Vr1,[2,40]),o($Vr1,[2,65]),{7:[1,230],16:$VE,22:$V31,72:$VF,74:$VG,79:$V41,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV},{14:$Vo,22:$Vp,25:$Vq,34:231,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},o($Vd,[2,18]),o($Vd,[2,20]),{16:$VE,22:$V31,24:[1,232],72:$VF,74:$VG,79:$V41,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV},{2:$Ve1,11:183,12:186,13:$V1,14:$Vf1,21:57,22:$Vp,25:$Vq,27:[1,233],29:181,30:184,31:185,32:187,33:$Vg1,34:194,35:$Vh1,36:$Vi1,39:$Vj1,41:$Vk1,42:$Vl1,45:$V4,47:$V5,48:$V6,49:16,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vm1,56:$Vn1,57:$Vo1,58:$Vp1,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{7:[1,234]},{7:[2,57]},{7:[2,58]},{16:$VE,22:$V31,24:[1,235],72:$VF,74:$VG,79:$V41,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV},{2:$Ve1,11:183,12:186,13:$V1,14:$Vf1,21:57,22:$Vp,25:$Vq,27:[1,236],29:181,30:184,31:185,32:187,33:$Vg1,34:194,35:$Vh1,36:$Vi1,39:$Vj1,41:$Vk1,42:$Vl1,45:$V4,47:$V5,48:$V6,49:16,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vm1,56:$Vn1,57:$Vo1,58:$Vp1,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},o($Vr1,[2,66]),{16:$VE,22:$V31,24:[1,237],72:$VF,74:$VG,79:$V41,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV},{25:[1,238]},{33:[1,239]},{7:[1,241],14:$Vo,22:$Vp,25:$Vq,34:240,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{25:[1,242]},{43:[1,243]},{25:[1,244]},o($V71,$V81,{26:245}),{22:[1,246]},{7:[1,247],16:$VE,22:$V31,72:$VF,74:$VG,79:$V41,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV},{14:$Vo,22:$Vp,24:$Vs1,25:$Vq,30:249,34:250,38:248,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{40:251,61:252,62:$Vt1,64:$Vu1},{22:[1,255]},o($V71,$V81,{26:256}),{2:$Ve1,11:183,12:186,13:$V1,14:$Vf1,21:57,22:$Vp,25:$Vq,27:[1,257],29:181,30:184,31:185,32:187,33:$Vg1,34:194,35:$Vh1,36:$Vi1,39:$Vj1,41:$Vk1,42:$Vl1,45:$V4,47:$V5,48:$V6,49:16,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vm1,56:$Vn1,57:$Vo1,58:$Vp1,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{14:$Vo,22:$Vp,25:$Vq,34:258,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{14:$Vo,22:$Vp,24:$Vs1,25:$Vq,30:249,34:250,38:259,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{24:[1,260]},{24:[2,60]},{16:$VE,22:$V31,24:[2,61],44:$V91,72:$VF,74:$VG,79:$V41,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV},{27:[1,261],61:262,62:$Vt1,64:$Vu1},o($Vv1,[2,72]),{14:$Vo,22:$Vp,25:$Vq,34:263,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},{63:[1,264]},{14:[1,265]},{2:$Ve1,11:183,12:186,13:$V1,14:$Vf1,21:57,22:$Vp,25:$Vq,27:[1,266],29:181,30:184,31:185,32:187,33:$Vg1,34:194,35:$Vh1,36:$Vi1,39:$Vj1,41:$Vk1,42:$Vl1,45:$V4,47:$V5,48:$V6,49:16,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vm1,56:$Vn1,57:$Vo1,58:$Vp1,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},o($Vr1,[2,33]),{16:$VE,22:$V31,24:[1,267],72:$VF,74:$VG,79:$V41,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV},{24:[1,268]},{25:[1,269]},o($Vr1,[2,37]),o($Vv1,[2,71]),{16:$VE,22:$V31,63:[1,270],72:$VF,74:$VG,79:$V41,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,94:$VV},o($Vq1,$V81,{26:271}),{14:[1,272]},o($Vr1,[2,67],{59:273,60:[1,274]}),o($Vr1,[2,34]),{25:[1,275]},o($V71,$V81,{26:276}),o($Vq1,$V81,{26:277}),o($Vv1,[2,74],{49:16,21:57,69:61,65:62,70:63,71:64,68:67,73:68,29:181,11:183,30:184,31:185,12:186,32:187,34:194,2:$Ve1,13:$V1,14:$Vf1,22:$Vp,25:$Vq,33:$Vg1,35:$Vh1,36:$Vi1,39:$Vj1,41:$Vk1,42:$Vl1,45:$V4,47:$V5,48:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vm1,56:$Vn1,57:$Vo1,58:$Vp1,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA}),{24:[1,278]},o($Vr1,[2,68]),{25:[1,280],32:279,58:$Vp1},o($V71,$V81,{26:281}),{2:$Ve1,11:183,12:186,13:$V1,14:$Vf1,21:57,22:$Vp,25:$Vq,27:[1,282],29:181,30:184,31:185,32:187,33:$Vg1,34:194,35:$Vh1,36:$Vi1,39:$Vj1,41:$Vk1,42:$Vl1,45:$V4,47:$V5,48:$V6,49:16,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vm1,56:$Vn1,57:$Vo1,58:$Vp1,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},o($Vv1,[2,73],{49:16,21:57,69:61,65:62,70:63,71:64,68:67,73:68,29:181,11:183,30:184,31:185,12:186,32:187,34:194,2:$Ve1,13:$V1,14:$Vf1,22:$Vp,25:$Vq,33:$Vg1,35:$Vh1,36:$Vi1,39:$Vj1,41:$Vk1,42:$Vl1,45:$V4,47:$V5,48:$V6,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vm1,56:$Vn1,57:$Vo1,58:$Vp1,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA}),{25:[1,283]},o($Vr1,[2,69]),o($V71,$V81,{26:284}),{2:$Ve1,11:183,12:186,13:$V1,14:$Vf1,21:57,22:$Vp,25:$Vq,27:[1,285],29:181,30:184,31:185,32:187,33:$Vg1,34:194,35:$Vh1,36:$Vi1,39:$Vj1,41:$Vk1,42:$Vl1,45:$V4,47:$V5,48:$V6,49:16,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vm1,56:$Vn1,57:$Vo1,58:$Vp1,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},o($Vr1,[2,36]),o($V71,$V81,{26:286}),{2:$Ve1,11:183,12:186,13:$V1,14:$Vf1,21:57,22:$Vp,25:$Vq,27:[1,287],29:181,30:184,31:185,32:187,33:$Vg1,34:194,35:$Vh1,36:$Vi1,39:$Vj1,41:$Vk1,42:$Vl1,45:$V4,47:$V5,48:$V6,49:16,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vm1,56:$Vn1,57:$Vo1,58:$Vp1,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},o($Vr1,[2,35]),{2:$Ve1,11:183,12:186,13:$V1,14:$Vf1,21:57,22:$Vp,25:$Vq,27:[1,288],29:181,30:184,31:185,32:187,33:$Vg1,34:194,35:$Vh1,36:$Vi1,39:$Vj1,41:$Vk1,42:$Vl1,45:$V4,47:$V5,48:$V6,49:16,50:$V7,51:$V8,52:$V9,53:$Va,54:$Vb,55:$Vm1,56:$Vn1,57:$Vo1,58:$Vp1,65:62,68:67,69:61,70:63,71:64,73:68,75:$Vr,76:$Vs,79:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA},o($Vr1,[2,70]),o($Vr1,[2,39])],
defaultActions: {17:[2,51],22:[2,1],48:[2,52],53:[2,50],226:[2,57],227:[2,58],249:[2,60]},
parseError: function parseError (str, hash) {
    _errores.push({type:"SINTAX", detail:`Found: ${hash.token}\nExpected: ${hash.expected}`, line: hash.loc.first_line, column: hash.loc.first_column})
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    var strBuffer = "";
    var _errores = []
	const TYPE_OP = require('./util').TYPE_OP;
	const TYPE_VAL = require('./util').TYPE_VAL;
	const AST_API = require('./util').AST_API;

    /**
        parser.parseError = (str, hash) => {
            _errores.push({type:"SINTAX", detail:`Found: ${hash.token}\nExpected: ${hash.expected}`, line: hash.loc.first_line, column: hash.loc.first_column})
            if (hash.recoverable) {
                this.trace(str);
            } else {
                var error = new Error(str);
                error.hash = hash;
                throw error;
            }
        };
    */
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:/* IGNORE */
break;
case 2:/* IGNORE */
break;
case 3:return 74;
break;
case 4:return 7;
break;
case 5:return "COMMA";
break;
case 6:return "COLONEQUAL"
break;
case 7:return 72;
break;
case 8:return "COLON";
break;
case 9:return 77;
break;
case 10:return 78;
break;
case 11:return 80;
break;
case 12:return 79;
break;
case 13:return 81;
break;
case 14:return 82;
break;
case 15:return 83;
break;
case 16:return "POW"
break;
case 17:return 89;
break;
case 18:return "LESS";
break;
case 19:return 91;
break;
case 20:return 90;
break;
case 21:return 85;
break;
case 22:return 86;
break;
case 23:return 87;
break;
case 24:return "EQUAL";
break;
case 25:return 16;
break;
case 26:return 18;
break;
case 27:return 22;
break;
case 28:return 24;
break;
case 29:return 25;
break;
case 30:return 27;
break;
case 31:return 92;
break;
case 32:return 93;
break;
case 33:return 94;
break;
case 34:return 95;
break;
case 35:return 76;
break;
case 36:return 101;
break;
case 37:return 51;
break;
case 38:return 52;
break;
case 39:return 53;
break;
case 40:return 54;
break;
case 41:return 8;
break;
case 42:return 45;
break;
case 43:return "R_CONST";
break;
case 44:return "R_GLOBAL";
break;
case 45:return 58;
break;
case 46:return 60;
break;
case 47:return 39;
break;
case 48:return 62;
break;
case 49:return 55;
break;
case 50:return 56;
break;
case 51:return 57;
break;
case 52:return 36;
break;
case 53:return 33;
break;
case 54:return 35;
break;
case 55:return 50;
break;
case 56:return "R_DEFINE";
break;
case 57:return "R_AS";
break;
case 58:return "R_STRC";
break;
case 59:return "R_TRY";
break;
case 60:return "R_CATCH";
break;
case 61:return "R_THROW";
break;
case 62:return 98;
break;
case 63:return 98;
break;
case 64:return 97;
break;
case 65:return 96;
break;
case 66: strBuffer = ""; this.begin('STRING'); 
break;
case 67: this.begin('CHAR'); 
break;
case 68:return 20;
break;
case 69:return 14;
break;
case 70: this.popState(); yy_.yytext = strBuffer; return 100; 
break;
case 71: strBuffer += "\""; 
break;
case 72: strBuffer += "\\"; 
break;
case 73: strBuffer += "\n"; 
break;
case 74: strBuffer += "\r"; 
break;
case 75: strBuffer += "\t"; 
break;
case 76: strBuffer += yy_.yytext; 
break;
case 77: console.log("TODO error unclosed String"); 
break;
case 78: yy_.yytext = "'"; this.popState(); return 99; 
break;
case 79: yy_.yytext = "\\"; this.popState(); return 99; 
break;
case 80: yy_.yytext = "\n"; this.popState(); return 99; 
break;
case 81: yy_.yytext = "\t"; this.popState(); return 99; 
break;
case 82: yy_.yytext = "\t"; this.popState(); return 99; 
break;
case 83: yy_.yytext = "\0"; this.popState(); return 99; 
break;
case 84: yy_.yytext = yy_.yytext.slice(0, -1);  this.popState(); return 99; 
break;
case 85: yy_.yytext = "\0"; this.popState(); return 99; 
break;
case 86: console.log("TODO error invalid Char... skipping"); this.popState(); 
break;
case 87:return 5;
break;
case 88: 
        _errores.push({type:"LEXICO", detail:`Unknown token '${yy_.yytext}'`, line: yy_.yylloc.first_line, column: yy_.yylloc.first_column});
    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\.)/i,/^(?:;)/i,/^(?:,)/i,/^(?::=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\^\^)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:===)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\^)/i,/^(?:!)/i,/^(?:\$)/i,/^(?:null\b)/i,/^(?:integer\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:import\b)/i,/^(?:var\b)/i,/^(?:const\b)/i,/^(?:global\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:continue\b)/i,/^(?:break\b)/i,/^(?:return\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:void\b)/i,/^(?:define\b)/i,/^(?:as\b)/i,/^(?:strc\b)/i,/^(?:try\b)/i,/^(?:catch\b)/i,/^(?:throw\b)/i,/^(?:false\b)/i,/^(?:true\b)/i,/^(?:[0-9]+\.[0-9]*)/i,/^(?:[0-9]+)/i,/^(?:")/i,/^(?:')/i,/^(?:([a-zA-Z])[a-zA-ZñÑ0-9_.]*\.j\b)/i,/^(?:([a-zA-Z])[a-zA-ZñÑ0-9_]*)/i,/^(?:")/i,/^(?:\\")/i,/^(?:\\\\)/i,/^(?:\\n)/i,/^(?:\\r)/i,/^(?:\\t)/i,/^(?:.)/i,/^(?:$)/i,/^(?:\\'')/i,/^(?:\\\\')/i,/^(?:\\n')/i,/^(?:\\r')/i,/^(?:\\t')/i,/^(?:\\0')/i,/^(?:[^']')/i,/^(?:')/i,/^(?:.)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"CHAR":{"rules":[78,79,80,81,82,83,84,85,86],"inclusive":false},"STRING":{"rules":[70,71,72,73,74,75,76,77],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,87,88],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}